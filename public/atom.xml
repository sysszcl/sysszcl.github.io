<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>树叶莎莎遮窗棂的个人博客</title>
  
  <subtitle>当你要放弃的时候想想当初为什么坚持到现在！</subtitle>
  <link href="http://sysszcl.github.io/atom.xml" rel="self"/>
  
  <link href="http://sysszcl.github.io/"/>
  <updated>2025-09-21T14:17:17.572Z</updated>
  <id>http://sysszcl.github.io/</id>
  
  <author>
    <name>树叶莎莎遮窗棂</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PS将图片修改为白底图片</title>
    <link href="http://sysszcl.github.io/article/944abc.html"/>
    <id>http://sysszcl.github.io/article/944abc.html</id>
    <published>2025-09-20T08:13:37.000Z</published>
    <updated>2025-09-21T14:17:17.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、打开PS软件，将图片拖入PS，点击“移除背景”。"><a href="#一、打开PS软件，将图片拖入PS，点击“移除背景”。" class="headerlink" title="一、打开PS软件，将图片拖入PS，点击“移除背景”。"></a>一、打开PS软件，将图片拖入PS，点击“移除背景”。</h3><h3 id="二、点击工具栏“编辑选项”。"><a href="#二、点击工具栏“编辑选项”。" class="headerlink" title="二、点击工具栏“编辑选项”。"></a>二、点击工具栏“编辑选项”。</h3><h3 id="三、弹出的下拉菜单点击“首选项”。"><a href="#三、弹出的下拉菜单点击“首选项”。" class="headerlink" title="三、弹出的下拉菜单点击“首选项”。"></a>三、弹出的下拉菜单点击“首选项”。</h3><h3 id="四、弹出的第三级菜单内点击“透明度与色域”。"><a href="#四、弹出的第三级菜单内点击“透明度与色域”。" class="headerlink" title="四、弹出的第三级菜单内点击“透明度与色域”。"></a>四、弹出的第三级菜单内点击“透明度与色域”。</h3><h3 id="五、将其中的“网格大小”设置成“无”，点击“确定”即可。"><a href="#五、将其中的“网格大小”设置成“无”，点击“确定”即可。" class="headerlink" title="五、将其中的“网格大小”设置成“无”，点击“确定”即可。"></a>五、将其中的“网格大小”设置成“无”，点击“确定”即可。</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、打开PS软件，将图片拖入PS，点击“移除背景”。&quot;&gt;&lt;a href=&quot;#一、打开PS软件，将图片拖入PS，点击“移除背景”。&quot; class=&quot;headerlink&quot; title=&quot;一、打开PS软件，将图片拖入PS，点击“移除背景”。&quot;&gt;&lt;/a&gt;一、打开PS软件</summary>
      
    
    
    
    <category term="PS" scheme="http://sysszcl.github.io/categories/PS/"/>
    
    
    <category term="PS" scheme="http://sysszcl.github.io/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>实现EML格式邮件批量导入EXCEL文档</title>
    <link href="http://sysszcl.github.io/article/92bf9ad3.html"/>
    <id>http://sysszcl.github.io/article/92bf9ad3.html</id>
    <published>2025-07-02T14:12:00.000Z</published>
    <updated>2025-07-02T14:19:14.634Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一步：-将EML邮件全部放在一个文件夹中"><a href="#第一步：-将EML邮件全部放在一个文件夹中" class="headerlink" title="第一步： 将EML邮件全部放在一个文件夹中"></a>第一步： 将EML邮件全部放在一个文件夹中</h4><h4 id="第二步：-新建EXCEL文档，新建宏"><a href="#第二步：-新建EXCEL文档，新建宏" class="headerlink" title="第二步： 新建EXCEL文档，新建宏"></a>第二步： 新建EXCEL文档，新建宏</h4><h4 id="第三步：-复制以下代码到宏中，修改emlFolderPath-“C-Your-EML-Folder-Path-quot-‘-为您的实际路径后运行"><a href="#第三步：-复制以下代码到宏中，修改emlFolderPath-“C-Your-EML-Folder-Path-quot-‘-为您的实际路径后运行" class="headerlink" title="第三步： 复制以下代码到宏中，修改emlFolderPath = “C:\Your\EML\Folder\Path&quot; ‘ 为您的实际路径后运行"></a>第三步： 复制以下代码到宏中，修改emlFolderPath = “C:\Your\EML\Folder\Path&quot; ‘ 为您的实际路径后运行</h4><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line">Option Explicit</span><br><span class="line"></span><br><span class="line">Sub ImportAllEMLFromFolder()</span><br><span class="line">    Dim fso As Object &#x27; Scripting.FileSystemObject</span><br><span class="line">    Dim folder As Object &#x27; Scripting.Folder</span><br><span class="line">    Dim file As Object &#x27; Scripting.File</span><br><span class="line">    Dim emlFolderPath As String</span><br><span class="line">    Dim ws As Worksheet</span><br><span class="line">    Dim msg As Object &#x27; CDO.Message</span><br><span class="line">    Dim iRow As Long</span><br><span class="line">    Dim stream As Object &#x27; ADODB.Stream</span><br><span class="line">    Dim startTime As Double</span><br><span class="line">    Dim fileCount As Long</span><br><span class="line">    </span><br><span class="line">    &#x27; 记录开始时间</span><br><span class="line">    startTime = Timer</span><br><span class="line">    </span><br><span class="line">    &#x27; 设置EML文件夹路径 - 修改为您实际的EML文件夹路径</span><br><span class="line">    emlFolderPath = &quot;C:\Your\EML\Folder\Path\&quot; &#x27; 请修改为您的实际路径</span><br><span class="line">    </span><br><span class="line">    &#x27; 检查文件夹路径是否有效</span><br><span class="line">    Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">    If Not fso.FolderExists(emlFolderPath) Then</span><br><span class="line">        MsgBox &quot;指定的文件夹路径不存在，请修改路径后重试！&quot; &amp; vbCrLf &amp; _</span><br><span class="line">               &quot;当前路径: &quot; &amp; emlFolderPath, vbExclamation</span><br><span class="line">        Exit Sub</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    &#x27; 创建工作表</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    Application.DisplayAlerts = False</span><br><span class="line">    Worksheets(&quot;EML内容&quot;).Delete</span><br><span class="line">    Application.DisplayAlerts = True</span><br><span class="line">    On Error GoTo ErrorHandler</span><br><span class="line">    </span><br><span class="line">    Set ws = Worksheets.Add(After:=Worksheets(Worksheets.Count))</span><br><span class="line">    ws.Name = &quot;EML内容&quot;</span><br><span class="line">    </span><br><span class="line">    &#x27; 设置表头</span><br><span class="line">    With ws</span><br><span class="line">        .Cells(1, 1).Value = &quot;序号&quot;</span><br><span class="line">        .Cells(1, 2).Value = &quot;文件名&quot;</span><br><span class="line">        .Cells(1, 3).Value = &quot;发件人&quot;</span><br><span class="line">        .Cells(1, 4).Value = &quot;收件人&quot;</span><br><span class="line">        .Cells(1, 5).Value = &quot;抄送&quot;</span><br><span class="line">        .Cells(1, 6).Value = &quot;主题&quot;</span><br><span class="line">        .Cells(1, 7).Value = &quot;日期&quot;</span><br><span class="line">        .Cells(1, 8).Value = &quot;正文内容&quot;</span><br><span class="line">        .Cells(1, 9).Value = &quot;附件名称&quot;</span><br><span class="line">        .Cells(1, 10).Value = &quot;文件路径&quot;</span><br><span class="line">    End With</span><br><span class="line">    </span><br><span class="line">    &#x27; 设置表头格式</span><br><span class="line">    With ws.Range(&quot;A1:J1&quot;)</span><br><span class="line">        .Font.Bold = True</span><br><span class="line">        .Interior.Color = RGB(200, 200, 200)</span><br><span class="line">        .HorizontalAlignment = xlCenter</span><br><span class="line">    End With</span><br><span class="line">    </span><br><span class="line">    &#x27; 初始化计数器</span><br><span class="line">    iRow = 2</span><br><span class="line">    fileCount = 0</span><br><span class="line">    </span><br><span class="line">    &#x27; 创建必要的对象</span><br><span class="line">    Set stream = CreateObject(&quot;ADODB.Stream&quot;)</span><br><span class="line">    Set folder = fso.GetFolder(emlFolderPath)</span><br><span class="line">    </span><br><span class="line">    &#x27; 显示进度条</span><br><span class="line">    Application.StatusBar = &quot;正在处理EML文件，请稍候...&quot;</span><br><span class="line">    </span><br><span class="line">    &#x27; 遍历文件夹中的所有文件</span><br><span class="line">    For Each file In folder.Files</span><br><span class="line">        If LCase(fso.GetExtensionName(file.Name)) = &quot;eml&quot; Then</span><br><span class="line">            fileCount = fileCount + 1</span><br><span class="line">            </span><br><span class="line">            &#x27; 读取EML文件</span><br><span class="line">            Set msg = CreateObject(&quot;CDO.Message&quot;)</span><br><span class="line">            With stream</span><br><span class="line">                .Type = 1 &#x27; adTypeBinary</span><br><span class="line">                .Open</span><br><span class="line">                .LoadFromFile file.Path</span><br><span class="line">                .Position = 0</span><br><span class="line">                .Type = 2 &#x27; adTypeText</span><br><span class="line">                .Charset = &quot;utf-8&quot;</span><br><span class="line">            End With</span><br><span class="line">            </span><br><span class="line">            msg.DataSource.OpenObject stream, &quot;_Stream&quot;</span><br><span class="line">            </span><br><span class="line">            &#x27; 写入Excel</span><br><span class="line">            With ws</span><br><span class="line">                &#x27; 序号</span><br><span class="line">                .Cells(iRow, 1).Value = fileCount</span><br><span class="line">                </span><br><span class="line">                &#x27; 文件名</span><br><span class="line">                .Cells(iRow, 2).Value = file.Name</span><br><span class="line">                </span><br><span class="line">                &#x27; 发件人</span><br><span class="line">                .Cells(iRow, 3).Value = msg.From</span><br><span class="line">                </span><br><span class="line">                &#x27; 收件人</span><br><span class="line">                .Cells(iRow, 4).Value = msg.To</span><br><span class="line">                </span><br><span class="line">                &#x27; 抄送</span><br><span class="line">                .Cells(iRow, 5).Value = msg.CC</span><br><span class="line">                </span><br><span class="line">                &#x27; 主题</span><br><span class="line">                .Cells(iRow, 6).Value = msg.Subject</span><br><span class="line">                </span><br><span class="line">                &#x27; 日期</span><br><span class="line">                If Not IsNull(msg.SentOn) Then</span><br><span class="line">                    .Cells(iRow, 7).Value = msg.SentOn</span><br><span class="line">                    .Cells(iRow, 7).NumberFormat = &quot;yyyy-mm-dd hh:mm:ss&quot;</span><br><span class="line">                End If</span><br><span class="line">                </span><br><span class="line">                &#x27; 正文内容</span><br><span class="line">                .Cells(iRow, 8).Value = GetEmailBody(msg)</span><br><span class="line">                </span><br><span class="line">                &#x27; 附件名称</span><br><span class="line">                .Cells(iRow, 9).Value = GetAttachmentsNames(msg)</span><br><span class="line">                </span><br><span class="line">                &#x27; 文件路径</span><br><span class="line">                .Cells(iRow, 10).Value = file.Path</span><br><span class="line">            End With</span><br><span class="line">            </span><br><span class="line">            iRow = iRow + 1</span><br><span class="line">            Set msg = Nothing</span><br><span class="line">            stream.Close</span><br><span class="line">            </span><br><span class="line">            &#x27; 每处理10个文件刷新一次屏幕</span><br><span class="line">            If fileCount Mod 10 = 0 Then</span><br><span class="line">                Application.StatusBar = &quot;正在处理EML文件，已处理 &quot; &amp; fileCount &amp; &quot; 个...&quot;</span><br><span class="line">                DoEvents</span><br><span class="line">            End If</span><br><span class="line">        End If</span><br><span class="line">    Next file</span><br><span class="line">    </span><br><span class="line">    &#x27; 自动调整列宽</span><br><span class="line">    ws.Columns.AutoFit</span><br><span class="line">    </span><br><span class="line">    &#x27; 添加边框</span><br><span class="line">    With ws.Range(&quot;A1:J&quot; &amp; iRow - 1).Borders</span><br><span class="line">        .LineStyle = xlContinuous</span><br><span class="line">        .Weight = xlThin</span><br><span class="line">    End With</span><br><span class="line">    </span><br><span class="line">    &#x27; 冻结首行</span><br><span class="line">    ws.Activate</span><br><span class="line">    ws.Rows(2).Select</span><br><span class="line">    ActiveWindow.FreezePanes = True</span><br><span class="line">    ws.Range(&quot;A1&quot;).Select</span><br><span class="line">    </span><br><span class="line">    &#x27; 计算处理时间</span><br><span class="line">    Dim elapsedTime As String</span><br><span class="line">    elapsedTime = Format((Timer - startTime) / 86400, &quot;hh:mm:ss&quot;)</span><br><span class="line">    </span><br><span class="line">    &#x27; 完成提示</span><br><span class="line">    Application.StatusBar = False</span><br><span class="line">    MsgBox &quot;EML文件导入完成！&quot; &amp; vbCrLf &amp; _</span><br><span class="line">           &quot;共处理 &quot; &amp; fileCount &amp; &quot; 个EML文件&quot; &amp; vbCrLf &amp; _</span><br><span class="line">           &quot;耗时: &quot; &amp; elapsedTime, vbInformation</span><br><span class="line">    </span><br><span class="line">CleanUp:</span><br><span class="line">    &#x27; 释放对象</span><br><span class="line">    On Error Resume Next</span><br><span class="line">    If Not stream Is Nothing Then</span><br><span class="line">        If stream.State &lt;&gt; 0 Then stream.Close</span><br><span class="line">        Set stream = Nothing</span><br><span class="line">    End If</span><br><span class="line">    Set fso = Nothing</span><br><span class="line">    Set folder = Nothing</span><br><span class="line">    Set file = Nothing</span><br><span class="line">    Set ws = Nothing</span><br><span class="line">    Exit Sub</span><br><span class="line">    </span><br><span class="line">ErrorHandler:</span><br><span class="line">    Application.StatusBar = False</span><br><span class="line">    MsgBox &quot;错误 &quot; &amp; Err.Number &amp; &quot;: &quot; &amp; Err.Description &amp; vbCrLf &amp; _</span><br><span class="line">           &quot;发生在处理文件: &quot; &amp; file.Path, vbExclamation</span><br><span class="line">    Resume CleanUp</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Function GetEmailBody(msg As Object) As String</span><br><span class="line">    Dim body As String</span><br><span class="line">    Dim htmlBody As String</span><br><span class="line">    </span><br><span class="line">    On Error Resume Next</span><br><span class="line">    </span><br><span class="line">    &#x27; 尝试获取纯文本正文</span><br><span class="line">    body = msg.TextBody</span><br><span class="line">    </span><br><span class="line">    &#x27; 如果没有纯文本正文，则获取HTML正文</span><br><span class="line">    If body = &quot;&quot; Then</span><br><span class="line">        htmlBody = msg.HTMLBody</span><br><span class="line">        </span><br><span class="line">        &#x27; 简单的HTML到纯文本转换（去除标签）</span><br><span class="line">        body = StripHTML(htmlBody)</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    &#x27; 限制内容长度以避免单元格溢出</span><br><span class="line">    If Len(body) &gt; 32767 Then</span><br><span class="line">        body = Left(body, 32767) &amp; &quot;...[内容截断]&quot;</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    GetEmailBody = body</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">Function StripHTML(htmlText As String) As String</span><br><span class="line">    &#x27; 简单的HTML标签去除函数</span><br><span class="line">    Dim regEx As Object</span><br><span class="line">    Set regEx = CreateObject(&quot;VBScript.RegExp&quot;)</span><br><span class="line">    </span><br><span class="line">    With regEx</span><br><span class="line">        .Global = True</span><br><span class="line">        .MultiLine = True</span><br><span class="line">        .IgnoreCase = True</span><br><span class="line">        .Pattern = &quot;&lt;[^&gt;]+&gt;&quot; &#x27; 匹配所有HTML标签</span><br><span class="line">    End With</span><br><span class="line">    </span><br><span class="line">    StripHTML = regEx.Replace(htmlText, &quot;&quot;)</span><br><span class="line">    </span><br><span class="line">    &#x27; 替换常见的HTML实体</span><br><span class="line">    StripHTML = Replace(StripHTML, &quot;&amp;nbsp;&quot;, &quot; &quot;)</span><br><span class="line">    StripHTML = Replace(StripHTML, &quot;&amp;amp;&quot;, &quot;&amp;&quot;)</span><br><span class="line">    StripHTML = Replace(StripHTML, &quot;&amp;lt;&quot;, &quot;&lt;&quot;)</span><br><span class="line">    StripHTML = Replace(StripHTML, &quot;&amp;gt;&quot;, &quot;&gt;&quot;)</span><br><span class="line">    StripHTML = Replace(StripHTML, &quot;&amp;quot;&quot;, &quot;&quot;&quot;&quot;)</span><br><span class="line">    </span><br><span class="line">    &#x27; 去除多余的空格和换行</span><br><span class="line">    StripHTML = Application.WorksheetFunction.Clean(StripHTML)</span><br><span class="line">    StripHTML = Replace(Replace(Replace(StripHTML, vbCrLf, &quot; &quot;), vbCr, &quot; &quot;), vbLf, &quot; &quot;)</span><br><span class="line">    </span><br><span class="line">    &#x27; 合并连续空格</span><br><span class="line">    Do While InStr(StripHTML, &quot;  &quot;) &gt; 0</span><br><span class="line">        StripHTML = Replace(StripHTML, &quot;  &quot;, &quot; &quot;)</span><br><span class="line">    Loop</span><br><span class="line">    </span><br><span class="line">    Set regEx = Nothing</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">Function GetAttachmentsNames(msg As Object) As String</span><br><span class="line">    Dim att As Object &#x27; CDO.IBodyPart</span><br><span class="line">    Dim attNames As String</span><br><span class="line">    Dim i As Integer</span><br><span class="line">    </span><br><span class="line">    On Error Resume Next</span><br><span class="line">    </span><br><span class="line">    attNames = &quot;&quot;</span><br><span class="line">    </span><br><span class="line">    For i = 1 To msg.Attachments.Count</span><br><span class="line">        Set att = msg.Attachments.Item(i)</span><br><span class="line">        If attNames &lt;&gt; &quot;&quot; Then attNames = attNames &amp; &quot;; &quot;</span><br><span class="line">        attNames = attNames &amp; att.FileName</span><br><span class="line">    Next i</span><br><span class="line">    </span><br><span class="line">    &#x27; 限制内容长度以避免单元格溢出</span><br><span class="line">    If Len(attNames) &gt; 32767 Then</span><br><span class="line">        attNames = Left(attNames, 32767) &amp; &quot;...[内容截断]&quot;</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    GetAttachmentsNames = attNames</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;第一步：-将EML邮件全部放在一个文件夹中&quot;&gt;&lt;a href=&quot;#第一步：-将EML邮件全部放在一个文件夹中&quot; class=&quot;headerlink&quot; title=&quot;第一步： 将EML邮件全部放在一个文件夹中&quot;&gt;&lt;/a&gt;第一步： 将EML邮件全部放在一个文件夹中&lt;/h4&gt;&lt;h4 id=&quot;第二步：-新建EXCEL文档，新建宏&quot;&gt;&lt;a href=&quot;#第二步：-新建EXCEL文档，新建宏&quot; class=&quot;headerlink&quot; title=&quot;第二步： 新建EXCEL文档，新建宏&quot;&gt;&lt;/a&gt;第二步： 新建EXCEL文档，新建宏&lt;/h4&gt;&lt;h4 id=&quot;第三步：-复制以下代码到宏中，修改emlFolderPath-“C-Your-EML-Folder-Path-quot-‘-为您的实际路径后运行&quot;&gt;&lt;a href=&quot;#第三步：-复制以下代码到宏中，修改emlFolderPath-“C-Your-EML-Folder-Path-quot-‘-为您的实际路径后运行&quot; class=&quot;headerlink&quot; title=&quot;第三步： 复制以下代码到宏中，修改emlFolderPath = “C:\Your\EML\Folder\Path&amp;quot; ‘ 为您的实际路径后运行&quot;&gt;&lt;/a&gt;第三步： 复制以下代码到宏中，修改emlFolderPath = “C:\Your\EML\Folder\Path&amp;quot; ‘ 为您的实际路径后运行&lt;/h4&gt;</summary>
    
    
    
    <category term="Office" scheme="http://sysszcl.github.io/categories/Office/"/>
    
    
    <category term="EXCEL" scheme="http://sysszcl.github.io/tags/EXCEL/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10专业版/Office免费激活</title>
    <link href="http://sysszcl.github.io/article/a8e3b7b7.html"/>
    <id>http://sysszcl.github.io/article/a8e3b7b7.html</id>
    <published>2025-07-01T15:08:31.000Z</published>
    <updated>2025-07-01T15:21:04.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Windows-10专业版免费激活方法一"><a href="#Windows-10专业版免费激活方法一" class="headerlink" title="Windows 10专业版免费激活方法一"></a>Windows 10专业版免费激活方法一</h3><h4 id="第一步：在cmd中使用slmgr命令进行激活"><a href="#第一步：在cmd中使用slmgr命令进行激活" class="headerlink" title="第一步：在cmd中使用slmgr命令进行激活"></a>第一步：在cmd中使用slmgr命令进行激活</h4><p>输入激活命令：在命令提示符窗口中，依次输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr /skms kms.03k.org</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="这些命令的作用分别是："><a href="#这些命令的作用分别是：" class="headerlink" title="这些命令的作用分别是："></a>这些命令的作用分别是：</h4><p>/ipk：安装产品密钥<br>/skms：设置KMS服务器<br>/ato：激活Windows</p><h4 id="第二步：重启电脑"><a href="#第二步：重启电脑" class="headerlink" title="第二步：重启电脑"></a>第二步：重启电脑</h4><p>输入完这些命令后，系统会提示你重启电脑。重启后，你的Windows 10专业版应该就已经成功激活了！</p><h3 id="Windows-10专业版-Office免费激活方法二："><a href="#Windows-10专业版-Office免费激活方法二：" class="headerlink" title="Windows 10专业版/Office免费激活方法二："></a>Windows 10专业版/Office免费激活方法二：</h3><p>1.右键【开始】菜单<br>找到【Windows PowerShell+管理员(A)】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm https://massgrave.dev/get | iex</span><br></pre></td></tr></table></figure><p>如果没有弹出窗口可以试下这个代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm https://get.activated.win| iex</span><br></pre></td></tr></table></figure><p>在弹出的窗口选择需要的激活的软件，1-永久 激活windows，2-永久激活office，3-激活Windows到2038年<br>输入1，永久 激活windows<br>输入2再输入1，永久激活office<br>验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /xpr</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Windows-10专业版免费激活方法一&quot;&gt;&lt;a href=&quot;#Windows-10专业版免费激活方法一&quot; class=&quot;headerlink&quot; title=&quot;Windows 10专业版免费激活方法一&quot;&gt;&lt;/a&gt;Windows 10专业版免费激活方法一&lt;/h3&gt;&lt;h4 id=&quot;第一步：在cmd中使用slmgr命令进行激活&quot;&gt;&lt;a href=&quot;#第一步：在cmd中使用slmgr命令进行激活&quot; class=&quot;headerlink&quot; title=&quot;第一步：在cmd中使用slmgr命令进行激活&quot;&gt;&lt;/a&gt;第一步：在cmd中使用slmgr命令进行激活&lt;/h4&gt;&lt;p&gt;输入激活命令：在命令提示符窗口中，依次输入以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slmgr /skms kms.03k.org&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slmgr /ato&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://sysszcl.github.io/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://sysszcl.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>EXCEL文件密码清除</title>
    <link href="http://sysszcl.github.io/article/6e99a6da.html"/>
    <id>http://sysszcl.github.io/article/6e99a6da.html</id>
    <published>2025-07-01T15:00:37.000Z</published>
    <updated>2025-07-02T14:05:04.348Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Excel文件（xlsx类型）密码清除"><a href="#Excel文件（xlsx类型）密码清除" class="headerlink" title="Excel文件（xlsx类型）密码清除"></a>Excel文件（xlsx类型）密码清除</h3><h3 id="第一步：-将Excel表的xlsx后缀名修改为zip"><a href="#第一步：-将Excel表的xlsx后缀名修改为zip" class="headerlink" title="第一步： 将Excel表的xlsx后缀名修改为zip"></a>第一步： 将Excel表的xlsx后缀名修改为zip</h3><h3 id="第二步：-解压文件夹"><a href="#第二步：-解压文件夹" class="headerlink" title="第二步： 解压文件夹"></a>第二步： 解压文件夹</h3><h3 id="第三步：-找到xl文件夹中的workbook-xml文件，全局搜索Protection标签删除"><a href="#第三步：-找到xl文件夹中的workbook-xml文件，全局搜索Protection标签删除" class="headerlink" title="第三步： 找到xl文件夹中的workbook.xml文件，全局搜索Protection标签删除"></a>第三步： 找到xl文件夹中的workbook.xml文件，全局搜索Protection标签删除</h3><h3 id="第四部：-压缩文件夹为zip文件，将zip改回xlsx完成密码清除"><a href="#第四部：-压缩文件夹为zip文件，将zip改回xlsx完成密码清除" class="headerlink" title="第四部： 压缩文件夹为zip文件，将zip改回xlsx完成密码清除"></a>第四部： 压缩文件夹为zip文件，将zip改回xlsx完成密码清除</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Excel文件（xlsx类型）密码清除&quot;&gt;&lt;a href=&quot;#Excel文件（xlsx类型）密码清除&quot; class=&quot;headerlink&quot; title=&quot;Excel文件（xlsx类型）密码清除&quot;&gt;&lt;/a&gt;Excel文件（xlsx类型）密码清除&lt;/h3&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="Office" scheme="http://sysszcl.github.io/categories/Office/"/>
    
    
    <category term="EXCEL" scheme="http://sysszcl.github.io/tags/EXCEL/"/>
    
  </entry>
  
  <entry>
    <title>实现内网服务器外网访问</title>
    <link href="http://sysszcl.github.io/article/7342ecad.html"/>
    <id>http://sysszcl.github.io/article/7342ecad.html</id>
    <published>2025-04-30T03:13:21.000Z</published>
    <updated>2025-06-20T14:42:26.625Z</updated>
    
    <content type="html"><![CDATA[<h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>服务器内网环境、Windows已实现内外网同时通信</p><h4 id="一、在Windows电脑上安装代理软件"><a href="#一、在Windows电脑上安装代理软件" class="headerlink" title="一、在Windows电脑上安装代理软件"></a>一、在Windows电脑上安装代理软件</h4><p>  使用第三方代理服务器软件（如CCProxy）。下载并安装CCProxy<br>  配置CCProxy，具体是启动CCProxy，进入“设置”或“选项”。在“代理服务”中启用HTTP、HTTPS、FTP等协议。在“账号管理”中添加允许所有机器通过。</p><span id="more"></span><h4 id="二、在Ubuntu上配置代理"><a href="#二、在Ubuntu上配置代理" class="headerlink" title="二、在Ubuntu上配置代理"></a>二、在Ubuntu上配置代理</h4><p> <br>图形界面设置<br>  具体是进入“设置” -&gt; “网络” -&gt; “网络代理”。<br>配置代理：选择“手动”，输入Windows机器的IP地址和CCProxy中设置的端口号（默认HTTP为8080，HTTPS为8080，FTP为21）</p><h4 id="三、命令行配置"><a href="#三、命令行配置" class="headerlink" title="三、命令行配置"></a>三、命令行配置</h4><p>打开终端，编辑/etc/environment文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><h4 id="192-168-150-104为我的Windows电脑的IP"><a href="#192-168-150-104为我的Windows电脑的IP" class="headerlink" title="192.168.150.104为我的Windows电脑的IP"></a>192.168.150.104为我的Windows电脑的IP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http_proxy=<span class="string">&quot;http://192.168.150.104:8080/&quot;</span></span><br><span class="line">https_proxy=<span class="string">&quot;http://192.168.150.104:8080/&quot;</span></span><br><span class="line">ftp_proxy=<span class="string">&quot;http://192.168.150.104:21/&quot;</span></span><br><span class="line">no_proxy=<span class="string">&quot;localhost,127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure><p>保存并退出，然后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/environment</span><br></pre></td></tr></table></figure><h4 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h4><p>   在ubuntu上打开浏览器或使用curl命令访问外部网站，确认代理上网是否生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com</span><br></pre></td></tr></table></figure><h4 id="五、代理相关配置"><a href="#五、代理相关配置" class="headerlink" title="五、代理相关配置"></a>五、代理相关配置</h4><h5 id="打开-etc-profile文件在末尾加入："><a href="#打开-etc-profile文件在末尾加入：" class="headerlink" title="打开 /etc/profile文件在末尾加入："></a>打开 /etc/profile文件在末尾加入：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http_proxy=http://10.103.21.19:808</span><br><span class="line">https_proxy=http://10.103.21.19:808</span><br><span class="line">ftp_proxy=http://10.103.21.19:808</span><br><span class="line"><span class="built_in">export</span> http_proxy https_proxy ftp_proxy no_proxy</span><br></pre></td></tr></table></figure><p>保存后执行命令 source /etc/profile 使配置生效。</p><h5 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h5><p>（要能解析公网地址的dns，配置dns后测试方法： nslookup <a href="http://www.baidu.com/">www.baidu.com</a> ）<br>打开 /etc/sysconfig/network-scripts/ifcfg-eth0 加入<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DNS1= XXX.XXX.XXX.XXX</span><br></pre></td></tr></table></figure><br>一般为114.114.114.114和8.8.8.8和8.8.4.4</p><h5 id="另外Ubuntu22-04的模式"><a href="#另外Ubuntu22-04的模式" class="headerlink" title="另外Ubuntu22.04的模式"></a>另外Ubuntu22.04的模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">     version: 2</span><br><span class="line">     renderer: networkd</span><br><span class="line">     ethernets:</span><br><span class="line">       eth0:</span><br><span class="line">         addresses:</span><br><span class="line">           - 192.168.0.10/24</span><br><span class="line">         gateway4: 192.168.0.1</span><br><span class="line">         nameservers:</span><br><span class="line">           addresses: [114.114.114.114,8.8.8.8, 8.8.4.4]</span><br></pre></td></tr></table></figure><h5 id="保存更改"><a href="#保存更改" class="headerlink" title="保存更改"></a>保存更改</h5><p>按下“Ctrl+O”保存更改，然后按下“Ctrl+X”退出nano编辑器</p><h5 id="应用配置更改：在终端中运行以下命令应用新的网络配置："><a href="#应用配置更改：在终端中运行以下命令应用新的网络配置：" class="headerlink" title="应用配置更改：在终端中运行以下命令应用新的网络配置："></a>应用配置更改：在终端中运行以下命令应用新的网络配置：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><p>使网络配置生效</p><h5 id="验证网络连接"><a href="#验证网络连接" class="headerlink" title="验证网络连接"></a>验证网络连接</h5><p>您可以使用以下命令检查网络接口的状态和分配的IP地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure><h5 id="CCProx客户端测试是否能够上网-越高网速越快"><a href="#CCProx客户端测试是否能够上网-越高网速越快" class="headerlink" title="CCProx客户端测试是否能够上网,越高网速越快"></a>CCProx客户端测试是否能够上网,越高网速越快</h5><p>查看代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env | grep proxy</span><br></pre></td></tr></table></figure><p>验证设置是否生效 echo $http_proxy</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h4&gt;&lt;p&gt;服务器内网环境、Windows已实现内外网同时通信&lt;/p&gt;
&lt;h4 id=&quot;一、在Windows电脑上安装代理软件&quot;&gt;&lt;a href=&quot;#一、在Windows电脑上安装代理软件&quot; class=&quot;headerlink&quot; title=&quot;一、在Windows电脑上安装代理软件&quot;&gt;&lt;/a&gt;一、在Windows电脑上安装代理软件&lt;/h4&gt;&lt;p&gt;  使用第三方代理服务器软件（如CCProxy）。下载并安装CCProxy&lt;br&gt;  配置CCProxy，具体是启动CCProxy，进入“设置”或“选项”。在“代理服务”中启用HTTP、HTTPS、FTP等协议。在“账号管理”中添加允许所有机器通过。&lt;/p&gt;</summary>
    
    
    
    <category term="NetWork" scheme="http://sysszcl.github.io/categories/NetWork/"/>
    
    
    <category term="NetWork" scheme="http://sysszcl.github.io/tags/NetWork/"/>
    
  </entry>
  
  <entry>
    <title>实现内外网同时通信</title>
    <link href="http://sysszcl.github.io/article/64a44414.html"/>
    <id>http://sysszcl.github.io/article/64a44414.html</id>
    <published>2025-04-29T07:43:17.000Z</published>
    <updated>2025-06-20T14:42:26.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Windows实现内外网同时通信"><a href="#Windows实现内外网同时通信" class="headerlink" title="Windows实现内外网同时通信"></a>Windows实现内外网同时通信</h3><p>环境： 子网内所有电脑均使用内网通信，其中一台电脑连接无线WIFI网络</p><h4 id="一、查看以太网和无线网的网关ip"><a href="#一、查看以太网和无线网的网关ip" class="headerlink" title="一、查看以太网和无线网的网关ip"></a>一、查看以太网和无线网的网关ip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="二、查看ipv4路由表"><a href="#二、查看ipv4路由表" class="headerlink" title="二、查看ipv4路由表"></a>二、查看ipv4路由表</h4><p>在路由表中添加路由信息<br>命令模板： route add 网址段 mask 子网掩码 网关<br>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add 192.168.0.0 mask 255.255.255.0 192.168.10.1</span><br></pre></td></tr></table></figure><h4 id="三、ping测192-168-0-0网段地址"><a href="#三、ping测192-168-0-0网段地址" class="headerlink" title="三、ping测192.168.0.0网段地址"></a>三、ping测192.168.0.0网段地址</h4><p>1、能ping通则功能实现<br>2、若不能Ping通，则通过以下命令查看路由表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route <span class="built_in">print</span></span><br></pre></td></tr></table></figure><p>找到以太网IP地址以及网关的路由信息查看接口ip是否是以太网的ip,若不是则使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route delete 192.168.0.0</span><br></pre></td></tr></table></figure><p>路由表最上面有以太网接口索引数字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add 192.168.0.0 mask 255.255.255.0 192.168.10.1 <span class="keyword">if</span> 索引数字</span><br></pre></td></tr></table></figure><p>再次ping测192.168.0.0网段地址就解决啦！</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Windows实现内外网同时通信&quot;&gt;&lt;a href=&quot;#Windows实现内外网同时通信&quot; class=&quot;headerlink&quot; title=&quot;Windows实现内外网同时通信&quot;&gt;&lt;/a&gt;Windows实现内外网同时通信&lt;/h3&gt;&lt;p&gt;环境： 子网内所有电脑均使用内网通信，其中一台电脑连接无线WIFI网络&lt;/p&gt;
&lt;h4 id=&quot;一、查看以太网和无线网的网关ip&quot;&gt;&lt;a href=&quot;#一、查看以太网和无线网的网关ip&quot; class=&quot;headerlink&quot; title=&quot;一、查看以太网和无线网的网关ip&quot;&gt;&lt;/a&gt;一、查看以太网和无线网的网关ip&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipconfig /all&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="NetWork" scheme="http://sysszcl.github.io/categories/NetWork/"/>
    
    
    <category term="NetWork" scheme="http://sysszcl.github.io/tags/NetWork/"/>
    
  </entry>
  
  <entry>
    <title>自定义html 标签中的 title属性</title>
    <link href="http://sysszcl.github.io/article/85c205a9.html"/>
    <id>http://sysszcl.github.io/article/85c205a9.html</id>
    <published>2022-12-21T15:19:00.000Z</published>
    <updated>2025-06-20T14:42:26.475Z</updated>
    
    <content type="html"><![CDATA[<h5 id="自定义html-标签中的-title属性"><a href="#自定义html-标签中的-title属性" class="headerlink" title="自定义html 标签中的 title属性"></a>自定义html 标签中的 title属性</h5><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=gbk&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JS控制TITLE悬停效果 - veryhuo.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* className 类名</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* tagname HTML标签名，如div,td,ul等</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* <span class="doctag">@return </span>Array 所有class对应标签对象组成的数组</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* <span class="doctag">@example</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript">&lt;div class=&quot;abc&quot;&gt;abc&lt;/div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">var abc = getClass(&#x27;abc&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">for(i=0;i&lt;abc.length;i++)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">abc[i].style.backgroundColor=&#x27;red&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getClass</span>(<span class="params">className,tagname</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//tagname默认值为&#x27;*&#x27;，不能直接写成默认参数方式getClass(className,tagname=&#x27;*&#x27;)，否则IE下报错</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span> tagname == <span class="string">&#x27;undefined&#x27;</span>) tagname = <span class="string">&#x27;*&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span>(getElementsByClassName) == <span class="string">&#x27;function&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> getElementsByClassName(className);</span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> tagname = <span class="built_in">document</span>.getElementsByTagName(tagname);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> tagnameAll = [];</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tagname.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(tagname[i].className == className) &#123;</span></span><br><span class="line"><span class="javascript">tagnameAll[tagnameAll.length] = tagname[i];</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> tagnameAll;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* JS字符切割函数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* <span class="doctag">@params </span>string 原字符串</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* <span class="doctag">@params </span>words_per_line 每行显示的字符数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*/</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">split_str</span>(<span class="params">string,words_per_line</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//空串，直接返回</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span> string == <span class="string">&#x27;undefined&#x27;</span> || string.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//单行字数未设定，非数值，则取默认值50</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span> words_per_line == <span class="string">&#x27;undefined&#x27;</span> || <span class="built_in">isNaN</span>(words_per_line))&#123;</span></span><br><span class="line"><span class="javascript">words_per_line = <span class="number">50</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//格式化成整形值</span></span></span><br><span class="line"><span class="javascript">words_per_line = <span class="built_in">parseInt</span>(words_per_line);</span></span><br><span class="line"><span class="javascript"><span class="comment">//取出i=0时的字，避免for循环里换行时多次判断i是否为0</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> output_string = string.substring(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//循环分隔字符串</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;string.length;i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//如果当前字符是每行显示的字符数的倍数，输出换行</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(i%words_per_line == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">output_string += <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//每次拼入一个字符</span></span></span><br><span class="line"><span class="javascript">output_string += string.substring(i,i+<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> output_string;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* 鼠标悬停显示TITLE</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* <span class="doctag">@params </span>obj 当前悬停的标签</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*/</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">titleMouseOver</span>(<span class="params">obj,event,words_per_line</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//无TITLE悬停，直接返回</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span> obj.title == <span class="string">&#x27;undefined&#x27;</span> || obj.title == <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//不存在title_show标签则自动新建</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> title_show = <span class="built_in">document</span>.getElementById(<span class="string">&quot;title_show&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(title_show == <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">title_show = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>); <span class="comment">//新建Element</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>].appendChild(title_show); <span class="comment">//加入body中</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> attr_id = <span class="built_in">document</span>.createAttribute(<span class="string">&#x27;id&#x27;</span>); <span class="comment">//新建Element的id属性</span></span></span><br><span class="line"><span class="javascript">attr_id.nodeValue = <span class="string">&#x27;title_show&#x27;</span>; <span class="comment">//为id属性赋值</span></span></span><br><span class="line"><span class="javascript">title_show.setAttributeNode(attr_id); <span class="comment">//为Element设置id属性</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> attr_style = <span class="built_in">document</span>.createAttribute(<span class="string">&#x27;style&#x27;</span>); <span class="comment">//新建Element的style属性</span></span></span><br><span class="line"><span class="javascript">attr_style.nodeValue = <span class="string">&#x27;position:absolute;&#x27;</span> <span class="comment">//绝对定位</span></span></span><br><span class="line"><span class="javascript">+<span class="string">&#x27;border:solid 1px #999999; background:#EDEEF0;&#x27;</span> <span class="comment">//边框、背景颜色</span></span></span><br><span class="line"><span class="javascript">+<span class="string">&#x27;border-radius:2px;box-shadow:2px 3px #999999;&#x27;</span> <span class="comment">//圆角、阴影</span></span></span><br><span class="line"><span class="javascript">+<span class="string">&#x27;line-height:18px;&#x27;</span> <span class="comment">//行间距</span></span></span><br><span class="line"><span class="javascript">+<span class="string">&#x27;font-size:12px; padding: 2px 5px;&#x27;</span>; <span class="comment">//字体大小、内间距</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="javascript">title_show.setAttributeNode(attr_style); <span class="comment">//为Element设置style属性</span></span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//IE6</span></span></span><br><span class="line"><span class="javascript">title_show.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span></span><br><span class="line"><span class="javascript">title_show.style.border = <span class="string">&#x27;solid 1px #999999&#x27;</span>;</span></span><br><span class="line"><span class="javascript">title_show.style.background = <span class="string">&#x27;#EDEEF0&#x27;</span>;</span></span><br><span class="line"><span class="javascript">title_show.style.lineHeight = <span class="string">&#x27;18px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">title_show.style.fontSize = <span class="string">&#x27;18px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">title_show.style.padding = <span class="string">&#x27;2px 5px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//存储并删除原TITLE</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.title_value = obj.title;</span></span><br><span class="line"><span class="javascript">obj.title = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//单行字数未设定，非数值，则取默认值50</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span> words_per_line == <span class="string">&#x27;undefined&#x27;</span> || <span class="built_in">isNaN</span>(words_per_line))&#123;</span></span><br><span class="line"><span class="javascript">words_per_line = <span class="number">50</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//格式化成整形值</span></span></span><br><span class="line"><span class="javascript">words_per_line = <span class="built_in">parseInt</span>(words_per_line);</span></span><br><span class="line"><span class="javascript"><span class="comment">//在title_show中按每行限定字数显示标题内容，模拟TITLE悬停效果</span></span></span><br><span class="line"><span class="javascript">title_show.innerHTML = split_str(<span class="built_in">document</span>.title_value,words_per_line);</span></span><br><span class="line"><span class="javascript"><span class="comment">//显示悬停效果DIV</span></span></span><br><span class="line"><span class="javascript">title_show.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//根据鼠标位置设定悬停效果DIV位置</span></span></span><br><span class="line"><span class="javascript">event = event || <span class="built_in">window</span>.event; <span class="comment">//鼠标、键盘事件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> top_down = <span class="number">15</span>; <span class="comment">//下移15px避免遮盖当前标签</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//最左值为当前鼠标位置 与 body宽度减去悬停效果DIV宽度的最小值，否则将右端导致遮盖</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> left = <span class="built_in">Math</span>.min(event.clientX,<span class="built_in">document</span>.body.clientWidth-title_show.clientWidth);</span></span><br><span class="line"><span class="javascript">title_show.style.left = left+<span class="string">&quot;px&quot;</span>; <span class="comment">//设置title_show在页面中的X轴位置。</span></span></span><br><span class="line"><span class="javascript">title_show.style.top = (event.clientY + top_down)+<span class="string">&quot;px&quot;</span>; <span class="comment">//设置title_show在页面中的Y轴位置。</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* 鼠标离开隐藏TITLE</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* <span class="doctag">@params </span>obj 当前悬停的标签</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*/</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">titleMouseOut</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> title_show = <span class="built_in">document</span>.getElementById(<span class="string">&quot;title_show&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//不存在悬停效果，直接返回</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(title_show == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//存在悬停效果，恢复原TITLE</span></span></span><br><span class="line"><span class="javascript">obj.title = <span class="built_in">document</span>.title_value;</span></span><br><span class="line"><span class="javascript"><span class="comment">//隐藏悬停效果DIV</span></span></span><br><span class="line"><span class="javascript">title_show.style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* 悬停事件绑定</span></span></span><br><span class="line"><span class="comment"><span class="javascript">* <span class="doctag">@params </span>objs 所有需要绑定事件的Element</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*/</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">attachEvent</span>(<span class="params">objs,words_per_line</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span> objs != <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//单行字数未设定，非数值，则取默认值50</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="keyword">typeof</span> words_per_line == <span class="string">&#x27;undefined&#x27;</span> || <span class="built_in">isNaN</span>(words_per_line))&#123;</span></span><br><span class="line"><span class="javascript">words_per_line = <span class="number">50</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;objs.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">objs[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">titleMouseOver(<span class="built_in">this</span>,event,words_per_line);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">objs[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">titleMouseOut(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">// Downloads By http://www.veryhuo.com</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//初始化，当页面onload的时候，对所有class=&quot;title_hover&quot;的标签绑定TITLE悬停事件</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">attachEvent(getClass(<span class="string">&#x27;title_hover&#x27;</span>),<span class="number">18</span>); <span class="comment">//行字数设定为18</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">tr</span>&#123;<span class="attribute">float</span><span class="selector-pseudo">:left</span>; <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">title</span>=<span class="string">&quot;这个是默认的TITLE这个是默认的TITLE这个是默认的TITLE这个是默认的TITLE这个是默认的TITLE这个是默认的TITLE&quot;</span>&gt;</span>鼠标悬停[原生版本]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">title</span>=<span class="string">&quot;这个是JS实现悬停的TITLE这个是JS实现悬停的TITLE这个是JS实现悬停的TITLE这个是JS实现悬停的TITLE这个是JS实现悬停的TITLE&quot;</span></span></span><br><span class="line"><span class="tag">ο<span class="attr">nm</span>ο<span class="attr">use</span>ο<span class="attr">ver</span>=<span class="string">&quot;titleMouseOver(this,event,15);&quot;</span> ο<span class="attr">nm</span>ο<span class="attr">use</span>ο<span class="attr">ut</span>=<span class="string">&quot;titleMouseOut(this);&quot;</span>&gt;</span>鼠标悬停[直接调用函数版本,设定行字数]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;title_hover&quot;</span> <span class="attr">title</span>=<span class="string">&quot;ABCTesterABCTesterABCTesterABCTesterABCTesterABCTesterABCTester&quot;</span>&gt;</span>鼠标悬停[class控制版本]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">title</span>=<span class="string">&quot;这个是JS实现悬停的TITLE这个是JS实现悬停的TITLE这个是JS实现悬停的TITLE这个是JS实现悬停的TITLE这个是JS实现悬停的TITLE&quot;</span></span></span><br><span class="line"><span class="tag">ο<span class="attr">nm</span>ο<span class="attr">use</span>ο<span class="attr">ver</span>=<span class="string">&quot;titleMouseOver(this,event);&quot;</span> ο<span class="attr">nm</span>ο<span class="attr">use</span>ο<span class="attr">ut</span>=<span class="string">&quot;titleMouseOut(this);&quot;</span>&gt;</span>鼠标悬停[直接调用函数版本,默认行字数]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;margin:30px 0 0 0;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> <span class="attr">style</span>=<span class="string">&quot;color:#999;height:1px;&quot;</span>&gt;</span>如不能显示效果，请按Ctrl+F5刷新本页。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;自定义html-标签中的-title属性&quot;&gt;&lt;a href=&quot;#自定义html-标签中的-title属性&quot; class=&quot;headerlink&quot; title=&quot;自定义html 标签中的 title属性&quot;&gt;&lt;/a&gt;自定义html 标签中的 title属性&lt;/h5&gt;</summary>
    
    
    
    <category term="Web" scheme="http://sysszcl.github.io/categories/Web/"/>
    
    
    <category term="HTML" scheme="http://sysszcl.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 启动报错</title>
    <link href="http://sysszcl.github.io/article/67550989.html"/>
    <id>http://sysszcl.github.io/article/67550989.html</id>
    <published>2022-10-09T14:40:00.000Z</published>
    <updated>2025-06-20T14:42:25.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Error-unable-to-perform-an-operation-on-node-‘rabbit-‘-Please-see-diagnostics…"><a href="#Error-unable-to-perform-an-operation-on-node-‘rabbit-‘-Please-see-diagnostics…" class="headerlink" title="Error: unable to perform an operation on node ‘rabbit@***‘. Please see diagnostics…"></a>Error: unable to perform an operation on node ‘rabbit@***‘. Please see diagnostics…</h3><p>问题描述：</p><p>安装完 ErLang 和 RabbitMQ 之后执行 rabbitmqctl status 报错：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Error: unable to perform an operation on node &#x27;rabbit@wangshuo&#x27;. Please see diagnostics information and suggestions below.</span><br><span class="line"></span><br><span class="line">Most common reasons for this are:</span><br><span class="line"></span><br><span class="line"> * Target node is unreachable (e.g. due to hostname resolution, TCP connection or firewall issues)</span><br><span class="line"> * CLI tool fails to authenticate with the server (e.g. due to CLI tool&#x27;s Erlang cookie not matching that of the server)</span><br><span class="line"> * Target node is not running</span><br><span class="line"></span><br><span class="line">In addition to the diagnostics info below:</span><br><span class="line"></span><br><span class="line"> * See the CLI, clustering and networking guides on https://rabbitmq.com/documentation.html to learn more</span><br><span class="line"> * Consult server logs on node rabbit@wangshuo</span><br><span class="line"> * If target node is configured to use long node names, don&#x27;t forget to use --longnames with CLI tools</span><br><span class="line"></span><br><span class="line">DIAGNOSTICS</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">attempted to contact: [rabbit@wangshuo]</span><br><span class="line"></span><br><span class="line">rabbit@wangshuo:</span><br><span class="line">  * connected to epmd (port 4369) on wangshuo</span><br><span class="line">  * epmd reports: node &#x27;rabbit&#x27; not running at all</span><br><span class="line">                  no other nodes on wangshuo</span><br><span class="line">  * suggestion: start the node</span><br><span class="line"></span><br><span class="line">Current node details:</span><br><span class="line"> * node name: &#x27;rabbitmqcli-19760-rabbit@wangshuo&#x27;</span><br><span class="line"> * effective user&#x27;s home directory: C:\Users\13343</span><br><span class="line"> * Erlang cookie hash: y1wQRjvcOXX+x5pqGKKOWw==</span><br></pre></td></tr></table></figure><p> 错误的原因是 Erlang 的 cookie 出现问题，Erlang 会生成两个 cookie 文件：</p><p> <code>C:\Windows\System32\config\systemprofile\.erlang.cookie</code> </p><p> <code>C:\用户\你的用户名\.erlang.cookie</code>。</p><p>用后者的文件替换掉前者的文件。</p><blockquote><p>如果还不行，那就卸载了，然后使用 默认路径 重装。此方法最好使，能避免很多坑！</p></blockquote><p>重装之后启动服务并执行 rabbitmqctl status。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Error-unable-to-perform-an-operation-on-node-‘rabbit-‘-Please-see-diagnostics…&quot;&gt;&lt;a href=&quot;#Error-unable-to-perform-an-operation-on-node-‘rabbit-‘-Please-see-diagnostics…&quot; class=&quot;headerlink&quot; title=&quot;Error: unable to perform an operation on node ‘rabbit@***‘. Please see diagnostics…&quot;&gt;&lt;/a&gt;Error: unable to perform an operation on node ‘rabbit@***‘. Please see diagnostics…&lt;/h3&gt;&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;安装完 ErLang 和 RabbitMQ 之后执行 rabbitmqctl status 报错：&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://sysszcl.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://sysszcl.github.io/tags/Java/"/>
    
    <category term="RabbitMQ" scheme="http://sysszcl.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Hexo表格的写法</title>
    <link href="http://sysszcl.github.io/article/f574e2bb.html"/>
    <id>http://sysszcl.github.io/article/f574e2bb.html</id>
    <published>2022-08-09T13:02:00.000Z</published>
    <updated>2025-06-20T14:42:25.217Z</updated>
    
    <content type="html"><![CDATA[<p>每个属性对应的行为也就是下面的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|          |     换行符      | 空格符的合并及忽略  |自动换行 |</span><br><span class="line">|:-------  |:-------------- |:-----------      |:------ |</span><br><span class="line">|normal    |当成空格，并且合并 |合并           |是      |</span><br><span class="line">|nowrap   |当成空格，并且合并 |合并            |否      |</span><br><span class="line">|pre   |保留           | 保留              |否      |</span><br><span class="line">|pre-wrap  |保留             | 保留              |是      |</span><br><span class="line">|pre-line  |保留           | 合并              |是      |</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;每个属性对应的行为也就是下面的表&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="Hexo" scheme="http://sysszcl.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://sysszcl.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>HTML空白字符处理</title>
    <link href="http://sysszcl.github.io/article/d7fcda7e.html"/>
    <id>http://sysszcl.github.io/article/d7fcda7e.html</id>
    <published>2022-08-09T12:30:00.000Z</published>
    <updated>2025-06-20T14:42:25.352Z</updated>
    
    <content type="html"><![CDATA[<p>p标签中插入一段文字，是非常常见的需求，但是仔细分析，这里面有很多需要注意的细节。这篇和下篇博客，主要讲对于文本内容显示的处理，这篇主要介绍空白字符和white-space属性。</p><h3 id="浏览器的默认行为"><a href="#浏览器的默认行为" class="headerlink" title="浏览器的默认行为"></a>浏览器的默认行为</h3><p>浏览器支持4种空白字符：空格、制表符、回车、换行。默认情况下，有以下几点：</p><p>1.所有的空白字符，都会当成空格处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello </span><br><span class="line">  World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hello world之间加了一个换行符，但是最后显示的效果如下：</p><span id="more"></span><p><img src="https://img-blog.csdnimg.cn/9d1dccf1cffa407384636f683c3bc9b9.webp"></p><p>插入的是换行符，但是最后显示的时候变成了空格。这也就说明，如果我们有两段文字，在一个p标签内并不会保留换行符。要想实现换行效果，要么用两个p标签，要么用<code>&lt;br/&gt;</code>来换行。</p><p>2.头尾的空白符会直接忽略</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  hello  world  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后的显示效果如下：</p><p><img src="https://img-blog.csdnimg.cn/3825c49c053345a1820c9488b71413ed.webp"></p><p>p标签内部首尾的两个换行符都会直接忽略，使得我们排版带来的空白字符就不会影响最后显示的效果。span标签内部首尾的空格也会被忽略，所以，不要指望在span包裹的hello之后和world之前加入空格来增加两者间距。</p><p>3.多个空格会被合并</p><p>这一点应该比较熟悉，我在hello和world之间插入100个空格，也只会显示一个而已。那么如果我想插入多个空格呢，就只能用到字符实体这种东西了，也就是<code>&amp;nbsp;</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello      World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span> World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="white-space属性"><a href="#white-space属性" class="headerlink" title="white-space属性"></a>white-space属性</h5><p>浏览器的这种默认行为，为我们提供了很多便利，也符合我们的日常需求，比如代码的排版不会对展示产生过多影响。但是，这种默认行为也并不总是符合我们的需求。如果需要改变，可以通过white-space属性来实现，顾名思义，这个属性就是控制空白字符的，同时，他也会对浏览器的默认换行行为有一些影响。</p><p>1.<code>white-space:normal</code>，这是默认值，也就是浏览器的默认行为。除了上面提到的空白字符的处理外，当文字在一行放不下时，浏览器还会自动换行。关于换行的具体细节在下一篇博客介绍，这里我们简单点，只考虑中文字符，字数多了放不下就换一行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后显示的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/05c85cb44f264bc1b59988465b7d5d53.webp"></p><p>2.<code>white-space:nowrap</code>：所谓wrap，翻译成中文就是包裹，在CSS里面，我们可以理解成当一行放不下时，为了让他不超出容器，浏览器就要给文字换行，将文字包裹起来。那么nowrap就是不包裹，也就是文字超出就超出吧。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space:nowrap&quot;</span>&gt;</span>文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后显示的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/134130970b10401dab56b1a96e19252c.webp"></p><p>3.<code>white-space:pre</code>：我希望我写的格式就是最终展示的浏览器，浏览器不做任何处理，那就用这个值，或者用<code>&lt;pre&gt;</code>标签也一样的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space:pre&quot;</span>&gt;</span>    文字有点多文字有点多</span><br><span class="line">  </span><br><span class="line">  文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  文字有点多文字有点多文字有点多文字有点多文字有点多<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后显示的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/c551c170297542b1bbfcf318f817f0f5.webp"></p><p>我在开头加的空格没有被忽略，中间加的换行符也没有被当成空格，甚至多个换行符也没有被合并，第二行超长了也没有自动换行。总之，浏览器没有做任何处理。</p><p>4.<code>white-space:pre-wrap</code>：pre的效果看来有点太粗暴了，我还需要wrap包裹一些，也就是在pre的基础上希望自动换行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space:pre-wrap&quot;</span>&gt;</span>    文字有点多文字有点多</span><br><span class="line">  </span><br><span class="line">  文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  文字有点多文字有点多文字有点多文字有点多文字有点多<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后显示的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/f44c8ab95157467db03aff50954080cf.webp"></p><p>5.<code>white-space:pre-line：line</code>是一行的意思，加上line代表我更加强调换行，所以我就保留换行符，并且保留浏览器的wrap换行，这两个都是跟换行相关的。空格还是该合并合并，该忽略忽略，不跟pre一样搞了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space:pre-line&quot;</span>&gt;</span>    文字有点多文字有点多</span><br><span class="line">  </span><br><span class="line">  文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多文字有点多</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  文字有点多文字有点多文字有点多文字有点多文字有点多<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后显示的效果如下：</p><p><img src="https://img-blog.csdnimg.cn/d25cf74a51d2431c88cfde2aaf293c0d.webp"></p><h6 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h6><p>这个属性其实控制的是三点：</p><ul><li>换行符是否当成空格处理</li><li>多个空格是否合并，收尾空格是否忽略</li><li>是否自动换行</li></ul><p>每个属性对应的行为也就是下面的表</p><table><thead><tr><th align="left"></th><th align="left">换行符</th><th align="left">空格符的合并及忽略</th><th align="left">自动换行</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">当成空格，并且合并</td><td align="left">合并</td><td align="left">是</td></tr><tr><td align="left">nowrap</td><td align="left">当成空格，并且合并</td><td align="left">合并</td><td align="left">否</td></tr><tr><td align="left">pre</td><td align="left">保留</td><td align="left">保留</td><td align="left">否</td></tr><tr><td align="left">pre-wrap</td><td align="left">保留</td><td align="left">保留</td><td align="left">是</td></tr><tr><td align="left">pre-line</td><td align="left">保留</td><td align="left">合并</td><td align="left">是</td></tr></tbody></table><blockquote><p>原文链接： <a href="https://segmentfault.com/a/1190000020218665?utm_source=sf-similar-article">https://segmentfault.com/a/1190000020218665?utm_source=sf-similar-article</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;p标签中插入一段文字，是非常常见的需求，但是仔细分析，这里面有很多需要注意的细节。这篇和下篇博客，主要讲对于文本内容显示的处理，这篇主要介绍空白字符和white-space属性。&lt;/p&gt;
&lt;h3 id=&quot;浏览器的默认行为&quot;&gt;&lt;a href=&quot;#浏览器的默认行为&quot; class=&quot;headerlink&quot; title=&quot;浏览器的默认行为&quot;&gt;&lt;/a&gt;浏览器的默认行为&lt;/h3&gt;&lt;p&gt;浏览器支持4种空白字符：空格、制表符、回车、换行。默认情况下，有以下几点：&lt;/p&gt;
&lt;p&gt;1.所有的空白字符，都会当成空格处理&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  World&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;hello world之间加了一个换行符，但是最后显示的效果如下：&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="http://sysszcl.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="http://sysszcl.github.io/tags/Web/"/>
    
    <category term="CSS" scheme="http://sysszcl.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot运行发生异常:Factory method &#39;dataSource&#39; threw exception; nested exception is org.springframe</title>
    <link href="http://sysszcl.github.io/article/ccf89da9.html"/>
    <id>http://sysszcl.github.io/article/ccf89da9.html</id>
    <published>2022-08-07T07:12:00.000Z</published>
    <updated>2025-06-20T14:42:25.979Z</updated>
    
    <content type="html"><![CDATA[<p>异常:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> Caused by: org.springframework.beans.BeanInstantiationException:</span><br><span class="line"> Failed to instantiate [org.apache.tomcat.jdbc.pool.DataSource]: </span><br><span class="line"> Factory method <span class="string">&#x27;dataSource&#x27;</span> threw exception; </span><br><span class="line"> nested exception is org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$DataSourceBeanCreationException: </span><br><span class="line"> Cannot determine embedded database driver <span class="class"><span class="keyword">class</span> <span class="title">for</span> <span class="title">database</span> <span class="title">type</span> <span class="title">NONE</span>. </span></span><br><span class="line"><span class="class"> <span class="title">If</span> <span class="title">you</span> <span class="title">want</span> <span class="title">an</span> <span class="title">embedded</span> <span class="title">database</span> <span class="title">please</span> <span class="title">put</span> <span class="title">a</span> <span class="title">supported</span> <span class="title">one</span> <span class="title">on</span> <span class="title">the</span> <span class="title">classpath</span>. <span class="title">If</span> <span class="title">you</span> <span class="title">have</span> <span class="title">database</span> <span class="title">settings</span> <span class="title">to</span> <span class="title">be</span> <span class="title">load</span> <span class="title">from</span> <span class="title">a</span> </span></span><br><span class="line"><span class="class"><span class="title">particular</span> <span class="title">profile</span> <span class="title">you</span> <span class="title">may</span> <span class="title">need</span> <span class="title">to</span> <span class="title">active</span> <span class="title">it</span> (<span class="title">no</span> <span class="title">profiles</span> <span class="title">are</span> <span class="title">current</span> <span class="title">active</span>).</span></span><br></pre></td></tr></table></figure><p>原因:<br> maven依赖包冲突，有重复的依赖。</p><span id="more"></span><p>根据这个原因那就先把依赖的问题解决，但是此时显示了另外一个原因如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to configure a DataSource: <span class="string">&#x27;url&#x27;</span> attribute is not specified and no embedded datasource could be configure.</span><br><span class="line"></span><br><span class="line">Reason: Failed to determine a suitable driver <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Action</span>:</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Consider</span> <span class="title">the</span> <span class="title">following</span>:</span></span><br><span class="line"><span class="class">    <span class="title">If</span> <span class="title">you</span> <span class="title">want</span> <span class="title">an</span> <span class="title">embedded</span> <span class="title">database</span> (<span class="title">H2</span>, <span class="title">HSQL</span> <span class="title">or</span> <span class="title">Derby</span>), <span class="title">please</span> <span class="title">put</span> <span class="title">it</span> <span class="title">on</span> <span class="title">the</span> <span class="title">classpath</span>.</span></span><br><span class="line"><span class="class">    <span class="title">If</span> <span class="title">you</span> <span class="title">have</span> <span class="title">database</span> <span class="title">settings</span> <span class="title">to</span> <span class="title">be</span> <span class="title">load</span> <span class="title">from</span> <span class="title">a</span> <span class="title">particular</span> <span class="title">profile</span> <span class="title">you</span> <span class="title">may</span> <span class="title">need</span> <span class="title">to</span> <span class="title">activate</span> <span class="title">it</span> (<span class="title">no</span> <span class="title">profiles</span> <span class="title">are</span> <span class="title">current</span> <span class="title">active</span>).</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Disconnected</span> <span class="title">from</span> <span class="title">the</span> <span class="title">target</span> <span class="title">VM</span>, <span class="title">address</span>: &#x27;127.0.0.1:54478&#x27;, <span class="title">transport</span>: &#x27;<span class="title">socket</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>度娘的解决方法：在启动类注解上加上 exclude = DataSourceAutoConfiguration.class，但是我的项目使用了数据源，所以此方法行不通</p><p>我IDE里面看着配置文件application.yml命名在，可就是加载不了</p><p>根据target目录发现问题：springboot启动加载不到src/main/resources下的配置文件application.yml，因为打包的时候根本没有将application.yml加载到classes文件夹中</p><p>springboot会从classpath下的/config目录或者classpath的根目录查找application.properties或application.yml！</p><p>而我的classpath中，没有src/main/resources这个目录。</p><p>classpath中有 target/classes 这个目录，正是这个目录缺少我的配置文件，所以一直加载失败。</p><p><img src="https://img-blog.csdnimg.cn/a06d5da3f0ee4fcbafcaa611c2f349b9.png"></p><p>那么导致这个的原因为什么呢？在使用微服务架构的时候maven会聚合子工程，由于一些奇怪的操作后会产生<code>pom</code>的打包方式</p><p><img src="https://img-blog.csdnimg.cn/40d005aba44643a4b9fe09699cc76554.png"></p><p>删除即可，可能是maven的问题，clean一下即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;异常:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; Caused by: org.springframework.beans.BeanInstantiationException:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Failed to instantiate [org.apache.tomcat.jdbc.pool.DataSource]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Factory method &lt;span class=&quot;string&quot;&gt;&amp;#x27;dataSource&amp;#x27;&lt;/span&gt; threw exception; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; nested exception is org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$DataSourceBeanCreationException: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Cannot determine embedded database driver &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NONE&lt;/span&gt;. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt; &lt;span class=&quot;title&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;embedded&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;please&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;supported&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;classpath&lt;/span&gt;. &lt;span class=&quot;title&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;particular&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;active&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;it&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;profiles&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;active&lt;/span&gt;).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;原因:&lt;br&gt; maven依赖包冲突，有重复的依赖。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://sysszcl.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://sysszcl.github.io/tags/Java/"/>
    
    <category term="Maven" scheme="http://sysszcl.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Establishing SSL connection without server’s identity</title>
    <link href="http://sysszcl.github.io/article/6f62772.html"/>
    <id>http://sysszcl.github.io/article/6f62772.html</id>
    <published>2022-06-19T08:45:00.000Z</published>
    <updated>2025-06-20T14:42:26.278Z</updated>
    
    <content type="html"><![CDATA[<h5 id="关于WARN-Establishing-SSL-connection-without-server‘s-identity的解决方案"><a href="#关于WARN-Establishing-SSL-connection-without-server‘s-identity的解决方案" class="headerlink" title="关于WARN: Establishing SSL connection without server‘s identity的解决方案"></a>关于WARN: Establishing SSL connection without server‘s identity的解决方案</h5><p>当你运行程序出来这个警告时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sun Jul <span class="number">12</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">56</span> CST <span class="number">2020</span> WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL <span class="number">5.5</span><span class="number">.45</span>+, <span class="number">5.6</span><span class="number">.26</span>+ and <span class="number">5.7</span><span class="number">.6</span>+ requirements SSL connection must be established by <span class="keyword">default</span> <span class="keyword">if</span> explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘<span class="keyword">false</span>’. You need either to explicitly disable SSL by setting useSSL=<span class="keyword">false</span>, or set useSSL=<span class="keyword">true</span> and provide truststore <span class="keyword">for</span> server certificate verification.</span><br></pre></td></tr></table></figure><span id="more"></span><p>别急</p><p>让我猜猜</p><p>你的连接数据库的url是不是也这样写的</p><p><img src="https://img-blog.csdnimg.cn/5f1a024f874e45c594cc6a997a7fa44a.png"></p><p>用我蹩脚的英语给你翻译一波</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sun Jul <span class="number">12</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">56</span> CST <span class="number">2020</span>警告：不建议在没有服务器身份验证的情况下建立SSL连接。根据MySQL <span class="number">5.5</span><span class="number">.45</span> +，<span class="number">5.6</span><span class="number">.26</span> +和<span class="number">5.7</span><span class="number">.6</span>+的要求，如果未设置显式选项，则默认情况下必须建立SSL连接。为了与不使用SSL的现有应用程序兼容，将verifyServerCertificate属性设置为’<span class="keyword">false</span>’。您需要通过设置useSSL = <span class="keyword">false</span>来显式禁用SSL，或者设置useSSL = <span class="keyword">true</span>并为服务器证书验证提供信任库。</span><br></pre></td></tr></table></figure><p>现在，当你看到了中文翻译，是不是突然知道如何解决咯<br>呐，就这样，就阔以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: jdbc:mysql:<span class="comment">//localhost:3306/test1?useSSL = false</span></span><br></pre></td></tr></table></figure><p>but，为了保证万无一失<br>送你一个锦囊</p><p>把url改成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: jdbc:mysql:<span class="comment">//localhost:3306/test1?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br></pre></td></tr></table></figure><p>这句话可以帮你避免好多坑，谁用谁知道！</p><blockquote><p> 版权声明：本文为CSDN博主「佑佑有话说」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/youyou0710/article/details/107297577">https://blog.csdn.net/youyou0710/article/details/107297577</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;关于WARN-Establishing-SSL-connection-without-server‘s-identity的解决方案&quot;&gt;&lt;a href=&quot;#关于WARN-Establishing-SSL-connection-without-server‘s-identity的解决方案&quot; class=&quot;headerlink&quot; title=&quot;关于WARN: Establishing SSL connection without server‘s identity的解决方案&quot;&gt;&lt;/a&gt;关于WARN: Establishing SSL connection without server‘s identity的解决方案&lt;/h5&gt;&lt;p&gt;当你运行程序出来这个警告时：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Sun Jul &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;56&lt;/span&gt; CST &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt; WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL &lt;span class=&quot;number&quot;&gt;5.5&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.45&lt;/span&gt;+, &lt;span class=&quot;number&quot;&gt;5.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.26&lt;/span&gt;+ and &lt;span class=&quot;number&quot;&gt;5.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;+ requirements SSL connection must be established by &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;’. You need either to explicitly disable SSL by setting useSSL=&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, or set useSSL=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; and provide truststore &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; server certificate verification.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Mysql" scheme="http://sysszcl.github.io/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="http://sysszcl.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Navicat 连接MySQL数据库报错</title>
    <link href="http://sysszcl.github.io/article/a11705e4.html"/>
    <id>http://sysszcl.github.io/article/a11705e4.html</id>
    <published>2022-06-19T08:21:00.000Z</published>
    <updated>2025-06-20T14:42:25.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2059-authentication-plugin…错误解决方法"><a href="#2059-authentication-plugin…错误解决方法" class="headerlink" title="2059 - authentication plugin…错误解决方法"></a>2059 - authentication plugin…错误解决方法</h3><h5 id="Navicat-连接MySQL数据库出现错误：2059-authentication-plugin-‘caching-sha2-password’的解决方法。"><a href="#Navicat-连接MySQL数据库出现错误：2059-authentication-plugin-‘caching-sha2-password’的解决方法。" class="headerlink" title="Navicat 连接MySQL数据库出现错误：2059 - authentication plugin ‘caching_sha2_password’的解决方法。"></a>Navicat 连接MySQL数据库出现错误：2059 - authentication plugin ‘caching_sha2_password’的解决方法。</h5><p><strong>错误原因：MySQL新版本（8以上版本）的用户登录账户加密方式是【caching_sha2_password】，Navicat不支持这种用户登录账户加密方式。</strong></p><span id="more"></span><p>1.我们需要打开MySQL 命令行客户端，点击【MySQL 8.0 command line client】或者cmd进入Windows命令行，到mysql环境执行路径下，<code>mysql -u root -p</code> ；</p><p>2.输入自己安装MySQL时设置的密码，登录客户端；</p><p>3.我们先查看一下加密的方式，输入：show variables like ‘default_authentication_plugin’;</p><p>回车，如图所示；</p><p><img src="https://img-blog.csdnimg.cn/a783fcecd7564227815baf562ccd9122.png"></p><p>接下来，查看本地mysql用户的信息，</p><p>输入：select host,user,plugin from mysql.user;</p><p>回车，如图所示，可以看到root账户的加密方式是caching_sha2_password；</p><p><img src="https://img-blog.csdnimg.cn/2fc6d081dbb0479a97a8e03c1877c36d.png"></p><blockquote><p>但是Navicat不支持MySQL新版本的这种用户登录账户加密方式，所以下面我们要修改root账户的加密方式为【mysql_native_password】，如图所示，输入：ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘root’;</p></blockquote><p>回车，即可修改成功，注意这里最后的root是你设置的root账户的密码，我设置的是“root”。</p><p><img src="https://img-blog.csdnimg.cn/078f909560fa42018dc5fd397604b051.png"></p><p>最后，我们再重新连接MySQL，就可以成功用root账户连接了。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;2059-authentication-plugin…错误解决方法&quot;&gt;&lt;a href=&quot;#2059-authentication-plugin…错误解决方法&quot; class=&quot;headerlink&quot; title=&quot;2059 - authentication plugin…错误解决方法&quot;&gt;&lt;/a&gt;2059 - authentication plugin…错误解决方法&lt;/h3&gt;&lt;h5 id=&quot;Navicat-连接MySQL数据库出现错误：2059-authentication-plugin-‘caching-sha2-password’的解决方法。&quot;&gt;&lt;a href=&quot;#Navicat-连接MySQL数据库出现错误：2059-authentication-plugin-‘caching-sha2-password’的解决方法。&quot; class=&quot;headerlink&quot; title=&quot;Navicat 连接MySQL数据库出现错误：2059 - authentication plugin ‘caching_sha2_password’的解决方法。&quot;&gt;&lt;/a&gt;Navicat 连接MySQL数据库出现错误：2059 - authentication plugin ‘caching_sha2_password’的解决方法。&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;错误原因：MySQL新版本（8以上版本）的用户登录账户加密方式是【caching_sha2_password】，Navicat不支持这种用户登录账户加密方式。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Mysql" scheme="http://sysszcl.github.io/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="http://sysszcl.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>margin 实现水平居中，垂直居中原理</title>
    <link href="http://sysszcl.github.io/article/22a31491.html"/>
    <id>http://sysszcl.github.io/article/22a31491.html</id>
    <published>2022-04-19T11:36:00.000Z</published>
    <updated>2025-06-20T14:42:25.540Z</updated>
    
    <content type="html"><![CDATA[<p>前置知识：margin的auto属性的作用是用来分配剩余空间，所以对于有剩余空间的元素才有效哦（块及元素）。比如图片设置margin: 0 auto是无效的，因为图片是内联元素，不是占一整行，没有剩余空间。</p><h3 id="1-块级元素水平方向居中："><a href="#1-块级元素水平方向居中：" class="headerlink" title="1.块级元素水平方向居中："></a>1.块级元素水平方向居中：</h3><p><strong>原理：两侧auto，则平分剩余空间，相当于水平居中。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>跟垂直方向无关，垂直方向可随便设置，只要水平左右都设置为auto即可。</p><p><strong>注意：width宽度一定要设置，没有宽度的块默认就是100%，就没有auto值了。</strong></p><h3 id="2-块级元素水平居右："><a href="#2-块级元素水平居右：" class="headerlink" title="2.块级元素水平居右："></a>2.块级元素水平居右：</h3><p><strong>原理：一侧auto，一侧没设置，则设置auto的一侧分配所有剩余空。</strong></p><p>想让div居右显示，已经很简单了。把margin-left 的值设置为auto 即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>; </span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>原理：一侧定值,一侧auto,auto为剩余空间大小。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">margin-left</span>: auto;</span><br><span class="line">   margn-<span class="attribute">right</span>: <span class="number">100px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以上方法只能实现水平方向，对于垂直方向是无效的，因为垂直方向没有剩余空间，这点不再解释了。</p><h3 id="3-想要实现垂直方向的居中可以用-绝对定位-margin"><a href="#3-想要实现垂直方向的居中可以用-绝对定位-margin" class="headerlink" title="3.想要实现垂直方向的居中可以用(绝对定位+margin)"></a>3.想要实现垂直方向的居中可以用(绝对定位+margin)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>  &#123;</span><br><span class="line">       <span class="attribute">background</span>: <span class="number">#FF0000</span>;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">position</span>: absolute;</span><br><span class="line">       <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">margin</span>: auto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这里要注意哦，上下左右四个一个不能少，当我们给他定位让他上下左右都是0的时候，我们就有了多余空间，auto就能平分剩余的空间去实现水平垂直居中,<code>margin: auto;</code>  是关键，没有设置此项，也不会水平垂直居中哦。</strong></p><p> 仅实现垂直方向居中:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin-top</span>: auto;</span><br><span class="line"><span class="attribute">margin-bottom</span>: auto;</span><br></pre></td></tr></table></figure><p>解释下原理:</p><ul><li><p>在普通内容流中，margin:auto的效果等同于margin-top:0;margin-bottom:0。</p></li><li><p>position:absolute使绝对定位块跳出了内容流，内容流中的其余部分渲染时绝对定位部分不进行渲染。</p></li><li><p>为块区域设置top: 0; left: 0; bottom: 0; right: 0;将给浏览器重新分配一个边界框，此时该块块将填充其父元素的所有可用空间，所以margin 垂直方向上有了可分配的空间。</p></li><li><p>再设置margin 垂直方向上下为auto，即可实现垂直居中。（注意高度得设置）。</p></li></ul><p>版权声明：本文为CSDN博主「shizhan1881」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/linshizhan/article/details/71521140">https://blog.csdn.net/linshizhan/article/details/71521140</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前置知识：margin的auto属性的作用是用来分配剩余空间，所以对于有剩余空间的元素才有效哦（块及元素）。比如图片设置margin: 0 auto是无效的，因为图片是内联元素，不是占一整行，没有剩余空间。&lt;/p&gt;
&lt;h3 id=&quot;1-块级元素水平方向居中：&quot;&gt;&lt;a href=&quot;#1-块级元素水平方向居中：&quot; class=&quot;headerlink&quot; title=&quot;1.块级元素水平方向居中：&quot;&gt;&lt;/a&gt;1.块级元素水平方向居中：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原理：两侧auto，则平分剩余空间，相当于水平居中。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Web" scheme="http://sysszcl.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="http://sysszcl.github.io/tags/Web/"/>
    
    <category term="CSS" scheme="http://sysszcl.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Promise执行顺序举一反三</title>
    <link href="http://sysszcl.github.io/article/a80659d3.html"/>
    <id>http://sysszcl.github.io/article/a80659d3.html</id>
    <published>2022-04-16T08:27:00.000Z</published>
    <updated>2025-06-20T14:42:24.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件队列循环原理参照文章（JS异步之宏队列与微队列）"><a href="#事件队列循环原理参照文章（JS异步之宏队列与微队列）" class="headerlink" title="事件队列循环原理参照文章（JS异步之宏队列与微队列）"></a>事件队列循环原理参照文章（JS异步之宏队列与微队列）</h3><h3 id="Promise相关面试题1"><a href="#Promise相关面试题1" class="headerlink" title="Promise相关面试题1"></a>Promise相关面试题1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>打印结果： 3 2 4 1</strong></p><span id="more"></span><h3 id="Promise相关面试题2"><a href="#Promise相关面试题2" class="headerlink" title="Promise相关面试题2"></a>Promise相关面试题2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">      &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>打印结果： 2 5 3 4 1</strong></p><h3 id="Promise相关面试题3"><a href="#Promise相关面试题3" class="headerlink" title="Promise相关面试题3"></a>Promise相关面试题3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> first = <span class="function">() =&gt;</span> (<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">            resolve(<span class="number">6</span>)</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">          resolve(<span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        resolve(<span class="number">2</span>)</span><br><span class="line">        p.then(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(arg)</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">      &#125;))</span><br><span class="line">    </span><br><span class="line">      first().then(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>打印结果： 3 7 4 1 2 5</strong></p><h3 id="Promise相关面试题4"><a href="#Promise相关面试题4" class="headerlink" title="Promise相关面试题4"></a>Promise相关面试题4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).then(<span class="function">()=&gt;</span>&#123;        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">          resolve()<span class="comment">//不会重复调用回调函数，同一个回调函数只执行一次</span></span><br><span class="line">        &#125;).then(<span class="function">()=&gt;</span>&#123;      </span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">        &#125;).then(<span class="function">()=&gt;</span>&#123;       </span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;).then(<span class="function">()=&gt;</span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;7&quot;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).then(<span class="function">()=&gt;</span>&#123;         </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;8&quot;</span>)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p><strong>打印结果：1 7 2 3 8 4 6 5 0</strong></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;事件队列循环原理参照文章（JS异步之宏队列与微队列）&quot;&gt;&lt;a href=&quot;#事件队列循环原理参照文章（JS异步之宏队列与微队列）&quot; class=&quot;headerlink&quot; title=&quot;事件队列循环原理参照文章（JS异步之宏队列与微队列）&quot;&gt;&lt;/a&gt;事件队列循环原理参照文章（JS异步之宏队列与微队列）&lt;/h3&gt;&lt;h3 id=&quot;Promise相关面试题1&quot;&gt;&lt;a href=&quot;#Promise相关面试题1&quot; class=&quot;headerlink&quot; title=&quot;Promise相关面试题1&quot;&gt;&lt;/a&gt;Promise相关面试题1&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve().then(&lt;span class=&quot;function&quot;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve().then(&lt;span class=&quot;function&quot;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;打印结果： 3 2 4 1&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="http://sysszcl.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="http://sysszcl.github.io/tags/Web/"/>
    
    <category term="JavaScript" scheme="http://sysszcl.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Promise从入门到自定义</title>
    <link href="http://sysszcl.github.io/article/55288387.html"/>
    <id>http://sysszcl.github.io/article/55288387.html</id>
    <published>2022-04-16T04:11:00.000Z</published>
    <updated>2025-06-20T14:42:25.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第-1-章：Promise-的理解和使用"><a href="#第-1-章：Promise-的理解和使用" class="headerlink" title="第 1 章：Promise 的理解和使用"></a>第 1 章：Promise 的理解和使用</h3><h3 id="Promise-是什么"><a href="#Promise-是什么" class="headerlink" title="Promise 是什么?"></a>Promise 是什么?</h3><p><strong>理解:</strong></p><ol><li>抽象表达: <ol><li>Promise 是一门新的技术(ES6 规范)</li><li>Promise 是 JS 中进行异步编程的新解决方案</li></ol>  备注：旧方案是单纯使用回调函数</li><li>具体表达:<ol><li>从语法上来说: Promise 是一个构造函数</li><li>从功能上来说: promise 对象用来封装一个异步操作并可以获取其成功/失败的结果值</li></ol></li></ol> <span id="more"></span><h3 id="promise-的状态改变"><a href="#promise-的状态改变" class="headerlink" title="promise 的状态改变"></a>promise 的状态改变</h3><ol><li>pending 变为 resolved</li><li>pending 变为 rejected</li></ol><p>   <strong>说明</strong>: 只有这 2 种, 且一个 promise 对象只能改变一次,无论变为成功还是失败, 都会有一个结果数据,成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</p><h3 id="promise-的基本流程"><a href="#promise-的基本流程" class="headerlink" title="promise 的基本流程"></a>promise 的基本流程</h3><p><img src="https://img-blog.csdnimg.cn/56dcf11fb86c4863924b5b4969cac9ab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc3lzc3pjbA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="promise基本流程"></p><h3 id="promise-的基本使用"><a href="#promise-的基本使用" class="headerlink" title="promise 的基本使用"></a>promise 的基本使用</h3><ul><li>使用 1: 基本编码流程<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//1.创建promise对象（pending状态），指定执行器函数</span></span><br><span class="line">        <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 2.在执行器函数中启动异步任务</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> time = <span class="built_in">Date</span>.now()</span><br><span class="line">                    <span class="comment">//3 根据结果做不同处理</span></span><br><span class="line">                    <span class="comment">//3.1 如果成功了，调用resolve(),指定成功的value,变为resolved状态</span></span><br><span class="line">                <span class="keyword">if</span> (time % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                    resolve(<span class="string">&#x27;成功的值&#x27;</span> + time)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(<span class="string">&#x27;失败的值&#x27;</span> + time)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">2000</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//4.能promise指定成功或回调函数来成功或失败的回调函数来获取成功的value或失败的reason</span></span><br><span class="line">        p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="comment">//成功的回调函数onResolved,得到成功的value</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;成功的value:&#x27;</span>, value)</span><br><span class="line">        &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="comment">//失败的回调函数onReject,得到失败的reason</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;失败的reason:&#x27;</span>, reason)</span><br><span class="line">        &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>使用 2: 使用 promise 封装基于定时器的异步<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">doDelay</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1.创建promise对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//.2启动异步任务</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;启动异步任务&#x27;</span>)</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;延迟任务开始执行&#x27;</span>)</span><br><span class="line">                    <span class="keyword">const</span> time = <span class="built_in">Date</span>.now() <span class="comment">// 假设： 时间为奇数代表成功，为偶数代表失败</span></span><br><span class="line">                    <span class="keyword">if</span> (time % <span class="number">2</span> == <span class="number">1</span>) &#123; <span class="comment">// 成功了</span></span><br><span class="line">                        <span class="comment">//3.1 如果成功了，调用resolve()并传入成功的value</span></span><br><span class="line">                        resolve(<span class="string">&quot;成功的数据&quot;</span> + time)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//3.2 如果失败了，调用reject()并传入失败的reason</span></span><br><span class="line">                        reject(<span class="string">&quot;失败的数据&quot;</span> + time)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, time)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> promise = doDelay(<span class="number">2000</span>)</span><br><span class="line">        promise.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;成功的value:&quot;</span> + value)</span><br><span class="line">        &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;失败的value&quot;</span> + reason)</span><br><span class="line">        &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>使用 3: 使用 promise 封装 ajax 异步请求<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/*可复用的发送ajax请求的函数： xhr + promise*/</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">promiseAjax</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">                xhr.open(<span class="string">&quot;get&quot;</span>, url)</span><br><span class="line">                xhr.send()</span><br><span class="line">                xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">const</span> &#123;</span><br><span class="line">                        status,</span><br><span class="line">                        response</span><br><span class="line">                    &#125; = xhr</span><br><span class="line">                    <span class="comment">// 请求成功，调用resolve(value)</span></span><br><span class="line">                    <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt;= <span class="number">300</span>) &#123;</span><br><span class="line">                        resolve(<span class="built_in">JSON</span>.parse(response))</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 请求失败，调用reject(reason)</span></span><br><span class="line">                        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求失败：status:&#x27;</span> + status))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        promiseAjax(<span class="string">&#x27;https://api.apiopen.top2/getJoke?page=1&amp;count=2&amp;type=video&#x27;</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;显示成功数据&#x27;</span>, data)</span><br><span class="line">        &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error.message)</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="为什么要用-Promise"><a href="#为什么要用-Promise" class="headerlink" title="为什么要用 Promise?"></a>为什么要用 Promise?</h3></li></ul><ol><li>指定回调函数的方式更加灵活  (1)旧的: 必须在启动异步任务前指定  (2)promise: 启动异步任务 =&gt; 返回promie对象 =&gt; 给promise对象绑定回调函数(甚至可以在异步任务结束后指定/多个)</li><li>支持链式调用, 可以解决回调地狱问题  (1) 什么是回调地狱? <pre><code> 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件</code></pre>  (2)回调地狱的缺点? <pre><code> 不便于阅读、不便于异常处理</code></pre></li><li>解决方案?<br>  promise 链式调用</li><li>终极解决方案?<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                1. 指定回调函数的方式更加灵活:</span></span><br><span class="line"><span class="comment">                                旧的: 必须在启动异步任务前指定</span></span><br><span class="line"><span class="comment">                                promise: 启动异步任务 =&gt; 返回 promie 对象 =&gt; 给 promise 对象绑定回调函数</span></span><br><span class="line"><span class="comment">                                (甚至可以在异步任务结束后指定)</span></span><br><span class="line"><span class="comment">                                2. 支持链式调用, 可以解决回调地狱问题</span></span><br><span class="line"><span class="comment">                                什么是回调地狱? 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调函</span></span><br><span class="line"><span class="comment">                                数执行的条件</span></span><br><span class="line"><span class="comment">                                回调地狱的缺点? 不便于阅读 / 不便于异常处理</span></span><br><span class="line"><span class="comment">                                解决方案? promise 链式调用</span></span><br><span class="line"><span class="comment">                                终极解决方案? async/await</span></span><br><span class="line"><span class="comment">                                */</span></span><br><span class="line">        <span class="comment">// 成功的回调函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;声音文件创建成功: &quot;</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 失败的回调函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">failureCallback</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;声音文件创建失败: &quot;</span> + error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 1.1 使用纯回调函数 */</span></span><br><span class="line">        createAudioFileAsync(audioSettings, successCallback, failureCallback)</span><br><span class="line">            <span class="comment">/* 1.2. 使用 Promise */</span></span><br><span class="line">        <span class="keyword">const</span> promise = createAudioFileAsync(audioSettings); <span class="comment">// 2</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            promise.then(successCallback, failureCallback);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2.1. 回调地狱</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        doSomething(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                doSomethingElse(result, <span class="function"><span class="keyword">function</span>(<span class="params">newResult</span>) </span>&#123;</span><br><span class="line">                    doThirdThing(newResult, <span class="function"><span class="keyword">function</span>(<span class="params">finalResult</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;Got the final result: &#x27;</span> + finalResult)</span><br><span class="line">                    &#125;, failureCallback)</span><br><span class="line">                &#125;, failureCallback)</span><br><span class="line">            &#125;, failureCallback)</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            2.2. 使用 promise 的链式调用解决回调地狱</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        doSomething()</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> doSomethingElse(result)</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">newResult</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> doThirdThing(newResult)</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">finalResult</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;Got the final result: &#x27;</span> + finalResult)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(failureCallback)</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            2.3. async/await: 回调地狱的终极解决方案</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> doSomething()</span><br><span class="line">                <span class="keyword">const</span> newResult = <span class="keyword">await</span> doSomethingElse(result)</span><br><span class="line">                <span class="keyword">const</span> finalResult = <span class="keyword">await</span> doThirdThing(newResult)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;Got the final result: &#x27;</span> + finalResult)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                failureCallback(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="如何使用-Promise"><a href="#如何使用-Promise" class="headerlink" title="如何使用 Promise?"></a>如何使用 Promise?</h3><h5 id="API"><a href="#API" class="headerlink" title="API:"></a>API:</h5><ul><li>Promise 构造函数: Promise (excutor) {}<ul><li>executor 函数: 执行器 (resolve, reject) =&gt; {} </li><li>resolve 函数: 内部定义成功时我们调用的函数 value =&gt; {}</li><li>reject 函数: 内部定义失败时我们调用的函数 reason =&gt; {}</li><li>说明: executor 会在 Promise 内部立即同步调用,异步操作在执行器中执行</li></ul></li><li>Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}<ul><li>onResolved 函数: 成功的回调函数 (value) =&gt; {}</li><li>onRejected 函数: 失败的回调函数 (reason) =&gt; {}</li><li>说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调,返回一个新的 promise 对象</li></ul></li><li>Promise.prototype.catch 方法: (onRejected) =&gt; {}<ul><li>onRejected 函数: 失败的回调函数 (reason) =&gt; {}</li><li>说明: then()的语法糖, 相当于: then(undefined, onRejected)</li></ul></li><li>Promise.resolve 方法: (value) =&gt; {}<ul><li>value: 成功的数据或 promise 对象</li><li>说明: 返回一个成功/失败的 promise 对象</li></ul></li><li>Promise.reject 方法: (reason) =&gt; {}<ul><li>reason: 失败的原因</li><li>说明: 返回一个失败的 promise 对象</li></ul></li><li>Promise.all 方法: (promises) =&gt; {}<ul><li>promises: 包含 n 个 promise 的数组</li><li>说明: 返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一个失败了就直接失败</li></ul></li><li>Promise.race 方法: (promises) =&gt; {}<ul><li>promises: 包含 n 个 promise 的数组</li><li>说明: 返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">                <span class="comment">/* 1. Promise 构造函数: Promise (excutor) &#123;&#125; excutor 函数: 同步执行(resolve, reject) =&gt; &#123;&#125; resolve 函数: 内部定义成功时我们调用的函数 value =&gt;&#123;&#125; reject 函数: 内部定义失败时我们调用的函数 reason =&gt; &#123;&#125; 说明: excutor 会在 Promise 内部立即同步回调,异步操作在执行器中执行 </span></span><br><span class="line"><span class="comment">                  2. Promise.prototype.then 方法: (onResolved, onRejected)=&gt; &#123;&#125; onResolved 函数: 成功的回调函数 (value) =&gt; &#123;&#125; onRejected 函数: 失败的回调函数 (reason) =&gt; &#123;&#125; 说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调 返回一个新的 promise 对象 </span></span><br><span class="line"><span class="comment">                  3. Promise.prototype.catch 方法: (onRejected) =&gt; &#123;&#125; onRejected 函数: 失败的回调函数 (reason) =&gt; &#123;&#125; 说明: then()的语法糖,相当于: then(undefined, onRejected) </span></span><br><span class="line"><span class="comment">                  4. Promise.resolve 方法: (value) =&gt; &#123;&#125; value: 成功的数据或 promise 对象 说明: 返回一个成功/失败的 promise 对象 </span></span><br><span class="line"><span class="comment">                  5. Promise.reject 方法: (reason) =&gt; &#123;&#125; reason: 失败的原因 说明: 返回一个失败的 promise 对象 </span></span><br><span class="line"><span class="comment">                  6. Promise.all 方法: (promises) =&gt; &#123;&#125; promises: 包含 n个promise 的数组 说明: 返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一 个失败了就直接失败 </span></span><br><span class="line"><span class="comment">                  7. Promise.race 方法: (promises) =&gt; &#123;&#125; promises: 包含 n 个 promise 的数组 说明: 返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的 结果状态 */</span></span><br><span class="line">        <span class="comment">/* new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">          if (Date.now()%2===0)&#123;</span></span><br><span class="line"><span class="comment">               resolve(1) </span></span><br><span class="line"><span class="comment">           &#125;else&#123;</span></span><br><span class="line"><span class="comment">                reject(2) </span></span><br><span class="line"><span class="comment">               &#125; &#125;)</span></span><br><span class="line"><span class="comment">          .then(value =&gt; &#123;</span></span><br><span class="line"><span class="comment">               console.log(&#x27;onResolved1()&#x27;, value) </span></span><br><span class="line"><span class="comment">           &#125;).catch(reason =&gt; &#123;</span></span><br><span class="line"><span class="comment">                console.log(&#x27;onRejected1()&#x27;, reason) </span></span><br><span class="line"><span class="comment">           &#125;) */</span></span><br><span class="line">        <span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">const</span> p2 = <span class="built_in">Promise</span>.resolve(<span class="built_in">Promise</span>.resolve(<span class="number">3</span>))</span><br><span class="line">        <span class="keyword">const</span> p3 = <span class="built_in">Promise</span>.resolve(<span class="built_in">Promise</span>.reject(<span class="number">5</span>))</span><br><span class="line">        <span class="keyword">const</span> p4 = <span class="built_in">Promise</span>.reject(<span class="number">7</span>)</span><br><span class="line">        <span class="keyword">const</span> p5 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Date</span>.now() % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                    resolve(<span class="number">1</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(<span class="number">2</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">100</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> pAll = <span class="built_in">Promise</span>.all([p1, p2, p5])</span><br><span class="line">        pAll.then(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;all 成功了&#x27;</span>, values)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;all 失败了&#x27;</span>, reason)</span><br><span class="line">                &#125;)</span><br><span class="line">            <span class="comment">/*const pRace = Promise.race([p5, p4, p1])</span></span><br><span class="line"><span class="comment">              const pRace = Promise.race([p5, p1, p4])</span></span><br><span class="line"><span class="comment">              pRace.then( value =&gt; &#123;</span></span><br><span class="line"><span class="comment">                  console.log(&#x27;race 成功了&#x27;, value)</span></span><br><span class="line"><span class="comment">               &#125;, reason =&gt; &#123;</span></span><br><span class="line"><span class="comment">                   console.log(&#x27;race 失败了&#x27;, reason)</span></span><br><span class="line"><span class="comment">               &#125; )*/</span></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="promise-的几个关键问题"><a href="#promise-的几个关键问题" class="headerlink" title="promise 的几个关键问题"></a>promise 的几个关键问题</h3><ul><li>如何改变 promise 的状态?<ul><li>resolve(value): 如果当前是 pending 就会变为 resolved</li><li>reject(reason): 如果当前是 pending 就会变为 rejected</li><li>抛出异常: 如果当前是 pending 就会变为 rejected</li></ul></li><li>一个 promise 指定多个成功/失败回调函数, 都会调用吗?<ul><li>当promise 改变为对应状态时都会调用,但是<strong>同一个回调函数不会重复执行</strong></li></ul></li><li>改变 promise 状态和指定回调函数谁先谁后?<ul><li>都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</li></ul></li><li>如何先改状态再指定回调?<ul><li>在执行器中直接调用 resolve()/reject()</li><li>延迟更长时间才调用 then()</li></ul></li><li>什么时候才能得到数据?<ul><li>如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据 </li><li>如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</li></ul></li><li>promise.then()返回的新 promise 的结果状态由什么决定?<ul><li>简单表达: 由 then()指定的回调函数执行的结果决定</li><li>详细表达: <ul><li>如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常  </li><li>如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</li><li>如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</li></ul></li></ul></li><li>promise 如何串连多个操作任务?<ul><li>promise 的 then()返回一个新的 promise, 可以开成 then()的链式调用</li><li>通过 then 的链式调用串连多个同步/异步任务</li></ul></li><li>promise 异常传透?<ul><li>当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调, </li><li>前面任何操作出了异常, 都会传到最后失败的回调中处理</li></ul></li><li>中断 promise 链?<ul><li>当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数</li><li>办法: 在回调函数中返回一个 pendding 状态的 promise 对象</li></ul></li></ul><h2 id="第-2-章：自定义-手写-Promise"><a href="#第-2-章：自定义-手写-Promise" class="headerlink" title="第 2 章：自定义(手写)Promise"></a>第 2 章：自定义(手写)Promise</h2><h3 id="定义整体结构"><a href="#定义整体结构" class="headerlink" title="定义整体结构"></a>定义整体结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="comment">/*自定义 Promise*/</span></span><br><span class="line">       (<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">window</span></span>) </span>&#123;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           Promise 构造函数</span></span><br><span class="line"><span class="comment">           excutor: 内部同步执行的函数 (resolve, reject) =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">           <span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;&#125;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           为 promise 指定成功/失败的回调函数</span></span><br><span class="line"><span class="comment">           函数的返回值是一个新的 promise 对象</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">           <span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) </span>&#123;&#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">               为 promise 指定失败的回调函数</span></span><br><span class="line"><span class="comment">               是 then(null, onRejected)的语法糖</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">           <span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>) </span>&#123;&#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">               返回一个指定了成功 value 的 promise 对象</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">           <span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">               返回一个指定了失败 reason 的 promise 对象</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">           <span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;&#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">               返回一个 promise, 只有 promises 中所有 promise 都成功时, 才最终成功, 只要有一个失败就直接</span></span><br><span class="line"><span class="comment">               失败</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">           <span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;&#125;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">               返回一个 promise， 一旦某个 promise 解决或拒绝， 返回的 promise 就会解决或拒绝。</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">           <span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;&#125;</span><br><span class="line">               <span class="comment">// 暴露构造函数</span></span><br><span class="line">           <span class="built_in">window</span>.Promise = <span class="built_in">Promise</span></span><br><span class="line">       &#125;)(<span class="built_in">window</span>)</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Promise-构造函数的实现"><a href="#Promise-构造函数的实现" class="headerlink" title="Promise 构造函数的实现"></a>Promise 构造函数的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                Promise 构造函数</span></span><br><span class="line"><span class="comment">                excutor: 内部同步执行的函数 (resolve, reject) =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">            self.status = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 状态值, 初始状态为 pending, 成功了变resolved,失败了变为 rejected</span></span><br><span class="line">            self.data = <span class="literal">undefined</span> <span class="comment">// 用来保存成功 value 或失败 reason 的属性</span></span><br><span class="line">            self.callbacks = [] <span class="comment">// 用来保存所有待调用的包含 onResolved 和 onRejected 回</span></span><br><span class="line">            调函数的对象的数组</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            异步处理成功后应该调用的函数</span></span><br><span class="line"><span class="comment">            value: 将交给 onResolve()的成功数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (self.status !== <span class="string">&#x27;pending&#x27;</span>) &#123; <span class="comment">// 如果当前不是 pending, 直接结束</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 立即更新状态, 保存数据</span></span><br><span class="line">                self.status = <span class="string">&#x27;resolved&#x27;</span></span><br><span class="line">                self.data = value</span><br><span class="line">                    <span class="comment">// 异步调用所有待处理的 onResolved 成功回调函数</span></span><br><span class="line">                <span class="keyword">if</span> (self.callbacks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        self.callbacks.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">                            obj.onResolved(value)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            异步处理失败后应该调用的函数</span></span><br><span class="line"><span class="comment">            reason: 将交给 onRejected()的失败数据</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (self.status !== <span class="string">&#x27;pending&#x27;</span>) &#123; <span class="comment">// 如果当前不是 pending, 直接结束</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 立即更新状态, 保存数据</span></span><br><span class="line">                self.status = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">                self.data = reason</span><br><span class="line">                    <span class="comment">// 异步调用所有待处理的 onRejected 回调函数</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    self.callbacks.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">                        obj.onRejected(reason)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 立即同步调用 excutor()处理</span></span><br><span class="line">                excutor(resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123; <span class="comment">// 如果出了异常, 直接失败</span></span><br><span class="line">                reject(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="promise-then-catch-的实现"><a href="#promise-then-catch-的实现" class="headerlink" title="promise.then()/catch()的实现"></a>promise.then()/catch()的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        为 promise 指定成功/失败的回调函数</span></span><br><span class="line"><span class="comment">        函数的返回值是一个新的 promise 对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">                <span class="comment">// 如果 onResolved/onRejected 不是函数, 可它指定一个默认的函数</span></span><br><span class="line">            onResolved = <span class="keyword">typeof</span> onResolved === <span class="string">&#x27;function&#x27;</span> ? onResolved : <span class="function"><span class="params">value</span> =&gt;</span> v</span><br><span class="line">            alue <span class="comment">// 指定返回的 promise 为一个成功状态, 结果值为 value</span></span><br><span class="line">            onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> reason</span><br><span class="line">                &#125; <span class="comment">// 指定返回的 promise 为一个失败状态, 结果值为 reason</span></span><br><span class="line">                <span class="comment">// 返回一个新的 promise 对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                专门抽取的用来处理 promise 成功/失败结果的函数</span></span><br><span class="line"><span class="comment">                callback: 成功/失败的回调函数</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 1. 抛出异常 ===&gt; 返回的 promise 变为 rejected</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> x = callback(self.data)</span><br><span class="line">                            <span class="comment">// 2. 返回一个新的 promise ===&gt; 得到新的 promise 的结果值作为返回的promise 的结果值</span></span><br><span class="line">                        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">                            x.then(resolve, reject) <span class="comment">// 一旦 x 成功了, resolve(value), 一旦 x</span></span><br><span class="line">                            失败了: reject(reason)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 3. 返回一个一般值(undefined) ===&gt; 将这个值作为返回的 promise 的</span></span><br><span class="line">                            成功值</span><br><span class="line">                            resolve(x)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        reject(error)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (self.status === <span class="string">&#x27;resolved&#x27;</span>) &#123; <span class="comment">// 当前 promise 已经成功了</span></span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        handle(onResolved)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">&#x27;rejected&#x27;</span>) &#123; <span class="comment">// 当前 promise 已经失败了</span></span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        handle(onRejected)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前 promise 还未确定 pending</span></span><br><span class="line">                    <span class="comment">// 将 onResolved 和 onRejected 保存起来</span></span><br><span class="line">                    self.callbacks.push(&#123;</span><br><span class="line">                        <span class="function"><span class="title">onResolved</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">                            handle(onResolved)</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="function"><span class="title">onRejected</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">                            handle(onRejected)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        为 promise 指定失败的回调函数</span></span><br><span class="line"><span class="comment">        是 then(null, onRejected)的语法糖</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-resolve-reject-的实现"><a href="#Promise-resolve-reject-的实现" class="headerlink" title="Promise.resolve()/reject()的实现"></a>Promise.resolve()/reject()的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回一个指定了成功 value 的 promise 对象</span></span><br><span class="line"><span class="comment">    value: 一般数据或 promise</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">                value.then(resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回一个指定了失败 reason 的 promise 对象</span></span><br><span class="line"><span class="comment">    reason: 一般数据/error</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(reason)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-all-race-的实现"><a href="#Promise-all-race-的实现" class="headerlink" title="Promise.all/race()的实现"></a>Promise.all/race()的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">          返回一个新的 promise 对象, 只有 promises 中所有 promise 都产生成功 value 时, 才</span></span><br><span class="line"><span class="comment">          最终成功, 只要有一个失败就直接失败</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">      <span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">              <span class="comment">// 返回一个新的 promise</span></span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="comment">// 已成功的数量</span></span><br><span class="line">                  <span class="keyword">let</span> resolvedCount = <span class="number">0</span></span><br><span class="line">                      <span class="comment">// 待处理的 promises 数组的长度</span></span><br><span class="line">                  <span class="keyword">const</span> promisesLength = promises.length</span><br><span class="line">                      <span class="comment">// 准备一个保存成功值的数组</span></span><br><span class="line">                  <span class="keyword">const</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>(promisesLength)</span><br><span class="line">                      <span class="comment">// 遍历每个待处理的 promise</span></span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promisesLength; i++) &#123;</span><br><span class="line">                      <span class="comment">// promises 中元素可能不是一个数组, 需要用 resolve 包装一下</span></span><br><span class="line">                      <span class="built_in">Promise</span>.resolve(promises[i]).then(</span><br><span class="line">                          <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                              <span class="comment">// 成功当前 promise 成功的值到对应的下标</span></span><br><span class="line">                              values[i] = value</span><br><span class="line">                                  <span class="comment">// 成功的数量加 1</span></span><br><span class="line">                              resolvedCount++</span><br><span class="line">                              <span class="comment">// 一旦全部成功</span></span><br><span class="line">                              <span class="keyword">if</span> (resolvedCount === promisesLength) &#123;</span><br><span class="line">                                  <span class="comment">// 将所有成功值的数组作为返回 promise 对象的成功结果值</span></span><br><span class="line">                                  resolve(values)</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;,</span><br><span class="line">                          <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">                              <span class="comment">// 一旦有一个promise产生了失败结果值, 将其作为返回promise对象的失</span></span><br><span class="line">                              败结果值</span><br><span class="line">                              reject(reason)</span><br><span class="line">                          &#125;</span><br><span class="line">                      )</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          返回一个 promise，一旦某个 promise 解决或拒绝， 返回的 promise 就会解决或拒绝。</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">      <span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 返回新的 promise 对象</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 遍历所有 promise</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">                  <span class="built_in">Promise</span>.resolve(promises[i]).then(</span><br><span class="line">                      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="comment">// 只要有一个成功了, 返回的 promise 就成功了</span></span><br><span class="line">                          resolve(value)</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="comment">// 只要有一个失败了, 返回的结果就失败了</span></span><br><span class="line">                          reject(reason)</span><br><span class="line">                      &#125;</span><br><span class="line">                  )</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-resolveDelay-rejectDelay-的实现"><a href="#Promise-resolveDelay-rejectDelay-的实现" class="headerlink" title="Promise.resolveDelay()/rejectDelay()的实现"></a>Promise.resolveDelay()/rejectDelay()的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*返回一个延迟指定时间才确定结果的 promise 对象*/</span></span><br><span class="line">        <span class="built_in">Promise</span>.resolveDelay = <span class="function"><span class="keyword">function</span>(<span class="params">value, time</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123; <span class="comment">// 如果 value 是一个 promise, 取这个promise 的结果值作为返回的 promise 的结果值</span></span><br><span class="line">                            value.then(resolve, reject) <span class="comment">// 如果 value 成功, 调用resolve(val), 如果 value 失败了, 调用 reject(reason)</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            resolve(value)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, time);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            返回一个延迟指定时间才失败的 Promise 对象。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="built_in">Promise</span>.rejectDelay = <span class="function"><span class="keyword">function</span>(<span class="params">reason, time</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        reject(reason)</span><br><span class="line">                    &#125;, time)</span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure><h3 id="ES5-function-完整版本"><a href="#ES5-function-完整版本" class="headerlink" title="ES5 function 完整版本"></a>ES5 function 完整版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.PromiseResult = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//声明属性</span></span><br><span class="line">    <span class="built_in">this</span>.callbacks = [];</span><br><span class="line">    <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">    <span class="comment">//resolve 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.PromiseState = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.PromiseResult = data;</span><br><span class="line">        <span class="comment">//调用成功的回调函数</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            self.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.onResolved(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reject 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(self.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">        self.PromiseState = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">        <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">        self.PromiseResult = data;</span><br><span class="line">        <span class="comment">//执行失败的回调</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            self.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.onRejected(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">        executor(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">        reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 then 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">//判断回调函数参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//封装函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                <span class="keyword">let</span> result = type(self.PromiseResult);</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                    result.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                        resolve(v);</span><br><span class="line">                    &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                        reject(r);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                    resolve(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                callback(onResolved);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                callback(onRejected);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 pending 状态</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//保存回调函数</span></span><br><span class="line">            <span class="built_in">this</span>.callbacks.push(&#123;</span><br><span class="line">                <span class="attr">onResolved</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    callback(onResolved);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    callback(onRejected);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 catch 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 resolve 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">            value.then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                resolve(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                reject(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//状态设置为成功</span></span><br><span class="line">            resolve(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 reject 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        reject(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 all 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//返回结果为promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//声明变量</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> arr = [];</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            promises[i].then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">                <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">                arr[i] = v;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(count === promises.length)&#123;</span><br><span class="line">                    <span class="comment">//修改状态</span></span><br><span class="line">                    resolve(arr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                reject(r);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 race 方法</span></span><br><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class="line">            promises[i].then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//修改返回对象的状态为 『成功』</span></span><br><span class="line">                resolve(v);</span><br><span class="line">            &#125;,<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//修改返回对象的状态为 『失败』</span></span><br><span class="line">                reject(r);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6-class-完整版"><a href="#ES6-class-完整版" class="headerlink" title="ES6 class 完整版"></a>ES6 class 完整版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//添加属性</span></span><br><span class="line">        <span class="built_in">this</span>.PromiseState = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.PromiseResult = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//声明属性</span></span><br><span class="line">        <span class="built_in">this</span>.callbacks = [];</span><br><span class="line">        <span class="comment">//保存实例对象的 this 的值</span></span><br><span class="line">        <span class="keyword">const</span> self = <span class="built_in">this</span>;<span class="comment">// self _this that</span></span><br><span class="line">        <span class="comment">//resolve 函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//判断状态</span></span><br><span class="line">            <span class="keyword">if</span>(self.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">            self.PromiseState = <span class="string">&#x27;fulfilled&#x27;</span>;<span class="comment">// resolved</span></span><br><span class="line">            <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">            self.PromiseResult = data;</span><br><span class="line">            <span class="comment">//调用成功的回调函数</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                self.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    item.onResolved(data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//reject 函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//判断状态</span></span><br><span class="line">            <span class="keyword">if</span>(self.PromiseState !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//1. 修改对象的状态 (promiseState)</span></span><br><span class="line">            self.PromiseState = <span class="string">&#x27;rejected&#x27;</span>;<span class="comment">// </span></span><br><span class="line">            <span class="comment">//2. 设置对象结果值 (promiseResult)</span></span><br><span class="line">            self.PromiseResult = data;</span><br><span class="line">            <span class="comment">//执行失败的回调</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                self.callbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    item.onRejected(data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//同步调用『执行器函数』</span></span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="comment">//修改 promise 对象状态为『失败』</span></span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then 方法封装</span></span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onResolved,onRejected</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">//判断回调函数参数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">            onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> reason;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> onResolved !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">            onResolved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">            <span class="comment">//value =&gt; &#123; return value&#125;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//封装函数</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//获取回调函数的执行结果</span></span><br><span class="line">                    <span class="keyword">let</span> result = type(self.PromiseResult);</span><br><span class="line">                    <span class="comment">//判断</span></span><br><span class="line">                    <span class="keyword">if</span>(result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">                        <span class="comment">//如果是 Promise 类型的对象</span></span><br><span class="line">                        result.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                            resolve(v);</span><br><span class="line">                        &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                            reject(r);</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//结果的对象状态为『成功』</span></span><br><span class="line">                        resolve(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用回调函数  PromiseState</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;fulfilled&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    callback(onResolved);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;rejected&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    callback(onRejected);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断 pending 状态</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.PromiseState === <span class="string">&#x27;pending&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//保存回调函数</span></span><br><span class="line">                <span class="built_in">this</span>.callbacks.push(&#123;</span><br><span class="line">                    <span class="attr">onResolved</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        callback(onResolved);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">onRejected</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        callback(onRejected);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//catch 方法</span></span><br><span class="line">    <span class="keyword">catch</span>(onRejected)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 resolve 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//返回promise对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)&#123;</span><br><span class="line">                value.then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">                    resolve(v);</span><br><span class="line">                &#125;, <span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                    reject(r);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//状态设置为成功</span></span><br><span class="line">                resolve(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 reject 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">            reject(reason);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 all 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">all</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//返回结果为promise对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//声明变量</span></span><br><span class="line">            <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> arr = [];</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                promises[i].then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//得知对象的状态是成功</span></span><br><span class="line">                    <span class="comment">//每个promise对象 都成功</span></span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="comment">//将当前promise对象成功的结果 存入到数组中</span></span><br><span class="line">                    arr[i] = v;</span><br><span class="line">                    <span class="comment">//判断</span></span><br><span class="line">                    <span class="keyword">if</span>(count === promises.length)&#123;</span><br><span class="line">                        <span class="comment">//修改状态</span></span><br><span class="line">                        resolve(arr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                    reject(r);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 race 方法</span></span><br><span class="line">    <span class="keyword">static</span> race (promises)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class="line">                promises[i].then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//修改返回对象的状态为 『成功』</span></span><br><span class="line">                    resolve(v);</span><br><span class="line">                &#125;,<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">//修改返回对象的状态为 『失败』</span></span><br><span class="line">                    reject(r);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第-3-章：async-与-await"><a href="#第-3-章：async-与-await" class="headerlink" title="第 3 章：async 与 await"></a>第 3 章：async 与 await</h2><h3 id="mdn-文档"><a href="#mdn-文档" class="headerlink" title="mdn 文档"></a>mdn 文档</h3><p>   <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a><br>   <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await</a></p><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><ol><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定<h3 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h3></li><li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</li><li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3></li><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li><li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="number">3</span>)</span><br><span class="line">                <span class="comment">// return fn3.test() // 程序运行会抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fn3.test() <span class="comment">// 程序运行会抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有使用 await 的 async 函数</span></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// await 右侧是一个成功的 promise</span></span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> fn1()</span><br><span class="line">                <span class="comment">// await 右侧是一个非 promise 的数据</span></span><br><span class="line">                <span class="comment">// const result = await fn2()</span></span><br><span class="line">                <span class="comment">// await 右侧是一个失败的 promise</span></span><br><span class="line">                <span class="comment">// const result = await fn3()</span></span><br><span class="line">                <span class="comment">// await 右侧抛出异常</span></span><br><span class="line">                <span class="comment">// const result = await fn4()</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, result)</span><br><span class="line">            <span class="keyword">return</span> result + <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> result2 = <span class="keyword">await</span> fn()</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;result2&#x27;</span>, result2)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, error)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> result3 = <span class="keyword">await</span> fn4()</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;result4&#x27;</span>, result3)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// test()</span></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第-1-章：Promise-的理解和使用&quot;&gt;&lt;a href=&quot;#第-1-章：Promise-的理解和使用&quot; class=&quot;headerlink&quot; title=&quot;第 1 章：Promise 的理解和使用&quot;&gt;&lt;/a&gt;第 1 章：Promise 的理解和使用&lt;/h3&gt;&lt;h3 id=&quot;Promise-是什么&quot;&gt;&lt;a href=&quot;#Promise-是什么&quot; class=&quot;headerlink&quot; title=&quot;Promise 是什么?&quot;&gt;&lt;/a&gt;Promise 是什么?&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;理解:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽象表达: &lt;ol&gt;
&lt;li&gt;Promise 是一门新的技术(ES6 规范)&lt;/li&gt;
&lt;li&gt;Promise 是 JS 中进行异步编程的新解决方案&lt;/li&gt;
&lt;/ol&gt;
  备注：旧方案是单纯使用回调函数&lt;/li&gt;
&lt;li&gt;具体表达:&lt;ol&gt;
&lt;li&gt;从语法上来说: Promise 是一个构造函数&lt;/li&gt;
&lt;li&gt;从功能上来说: promise 对象用来封装一个异步操作并可以获取其成功/失败的结果值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Web" scheme="http://sysszcl.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="http://sysszcl.github.io/tags/Web/"/>
    
    <category term="JavaScript" scheme="http://sysszcl.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS异步之宏队列与微队列</title>
    <link href="http://sysszcl.github.io/article/f7278d2d.html"/>
    <id>http://sysszcl.github.io/article/f7278d2d.html</id>
    <published>2022-04-15T16:18:00.000Z</published>
    <updated>2025-06-20T14:42:25.382Z</updated>
    
    <content type="html"><![CDATA[<ol><li>宏列队: 用来保存待执行的宏任务(回调), 比如: 定时器回调/DOM事件回调/ajax回调</li><li>微列队: 用来保存待执行的微任务(回调), 比如: promise的回调/MutationObserver的回调</li><li>JS执行时会区别这2个队列<br> JS引擎首先必须先执行所有的初始化同步任务代码<br> 每次准备取出第一个宏任务执行前, 都要将所有的微任务一个一个取出来执行</li></ol><p><img src="https://img-blog.csdnimg.cn/34b9692a0aec43499eaf44c4adf3894d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc3lzc3pjbA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="浏览器线程渲染"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;宏列队: 用来保存待执行的宏任务(回调), 比如: 定时器回调/DOM事件回调/ajax回调&lt;/li&gt;
&lt;li&gt;微列队: 用来保存待执行的微任务(回调), 比如: promise的回调/MutationObserver的回调&lt;/li&gt;
&lt;li&gt;JS执行时会区别这</summary>
      
    
    
    
    <category term="Web" scheme="http://sysszcl.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="http://sysszcl.github.io/tags/Web/"/>
    
    <category term="JavaScript" scheme="http://sysszcl.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>复杂链表的复制</title>
    <link href="http://sysszcl.github.io/article/68dc24ea.html"/>
    <id>http://sysszcl.github.io/article/68dc24ea.html</id>
    <published>2022-02-11T15:47:00.000Z</published>
    <updated>2025-06-20T14:42:26.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="请实现-copyRandomList-函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个-next-指针指向下一个节点，还有一个-random-指针指向链表中的任意节点或者-null。（链表前置知识-p-p-next中p指针指向自己的地址，p-next指针指向指针作用域为下一个节点的地址）"><a href="#请实现-copyRandomList-函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个-next-指针指向下一个节点，还有一个-random-指针指向链表中的任意节点或者-null。（链表前置知识-p-p-next中p指针指向自己的地址，p-next指针指向指针作用域为下一个节点的地址）" class="headerlink" title="请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。（链表前置知识 p = p-next中p指针指向自己的地址，p-next指针指向指针作用域为下一个节点的地址）"></a>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。（链表前置知识 p = p-next中p指针指向自己的地址，p-next指针指向指针作用域为下一个节点的地址）</h3><p>示例：<br>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]<br>输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</p><span id="more"></span><p>两种解法：</p><p>1.哈希表，空间和时间都是O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//map中存的是(原节点，拷贝节点)的一个映射</span></span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Node cur = head; cur != <span class="keyword">null</span>; cur = cur.next) &#123;</span><br><span class="line">            map.put(cur, <span class="keyword">new</span> Node(cur.val));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将拷贝的新的节点组织成一个链表</span></span><br><span class="line">        <span class="keyword">for</span> (Node cur = head; cur != <span class="keyword">null</span>; cur = cur.next) &#123;</span><br><span class="line">            map.get(cur).next = map.get(cur.next);</span><br><span class="line">            map.get(cur).random = map.get(cur.random);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.原地修改，空间复杂度为O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node next;</span></span><br><span class="line"><span class="comment">    Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">        this.next = null;</span></span><br><span class="line"><span class="comment">        this.random = null;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//将拷贝节点放到原节点后面</span></span><br><span class="line">       <span class="keyword">for</span>(Node node = head,copy = <span class="keyword">null</span>; node != <span class="keyword">null</span>;node = node.next.next)&#123;</span><br><span class="line">        copy = <span class="keyword">new</span> Node(node.val);</span><br><span class="line">        copy.next = node.next;</span><br><span class="line">        node.next = copy;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//把拷贝节点的random安排上</span></span><br><span class="line">       <span class="keyword">for</span>(Node node = head; node != <span class="keyword">null</span>; node = node.next.next)&#123;</span><br><span class="line">           <span class="keyword">if</span>(node.random != <span class="keyword">null</span>)&#123;</span><br><span class="line">               node.next.random = node.random.next;<span class="comment">//将复制节点的随机指针串起来（node.random.next与node.random指向相同）</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//分离拷贝节点和原节点，变成1-&gt;2-&gt;3和1&#x27;-&gt;2&#x27;-&gt;3&#x27;两个链表，后者就是答案</span></span><br><span class="line">        Node newHead = head.next;</span><br><span class="line">        <span class="keyword">for</span> (Node node = head, temp = <span class="keyword">null</span>; node != <span class="keyword">null</span> &amp;&amp; node.next != <span class="keyword">null</span>;) &#123;</span><br><span class="line">            temp = node.next;</span><br><span class="line">            node.next = temp.next;</span><br><span class="line">            node = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;请实现-copyRandomList-函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个-next-指针指向下一个节点，还有一个-random-指针指向链表中的任意节点或者-null。（链表前置知识-p-p-next中p指针指向自己的地址，p-next指针指向指针作用域为下一个节点的地址）&quot;&gt;&lt;a href=&quot;#请实现-copyRandomList-函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个-next-指针指向下一个节点，还有一个-random-指针指向链表中的任意节点或者-null。（链表前置知识-p-p-next中p指针指向自己的地址，p-next指针指向指针作用域为下一个节点的地址）&quot; class=&quot;headerlink&quot; title=&quot;请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。（链表前置知识 p = p-next中p指针指向自己的地址，p-next指针指向指针作用域为下一个节点的地址）&quot;&gt;&lt;/a&gt;请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。（链表前置知识 p = p-next中p指针指向自己的地址，p-next指针指向指针作用域为下一个节点的地址）&lt;/h3&gt;&lt;p&gt;示例：&lt;br&gt;输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]&lt;br&gt;输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="http://sysszcl.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://sysszcl.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>包含min函数的栈</title>
    <link href="http://sysszcl.github.io/article/11cbd9c1.html"/>
    <id>http://sysszcl.github.io/article/11cbd9c1.html</id>
    <published>2022-02-11T15:39:00.000Z</published>
    <updated>2025-06-20T14:42:25.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的-min-函数在该栈中，调用-min、push-及-pop-的时间复杂度都是-O-1-。"><a href="#定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的-min-函数在该栈中，调用-min、push-及-pop-的时间复杂度都是-O-1-。" class="headerlink" title="定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。"></a>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack1 = <span class="keyword">new</span> MinStack();</span><br><span class="line">minStack1.push(-<span class="number">2</span>);</span><br><span class="line">minStack1.push(<span class="number">0</span>);</span><br><span class="line">minStack1.push(-<span class="number">3</span>);</span><br><span class="line">minStack1.min();   --&gt; 返回 -<span class="number">3.</span></span><br><span class="line">minStack1.pop();</span><br><span class="line">minStack1.top();      --&gt; 返回 <span class="number">0.</span></span><br><span class="line">minStack1.min();   --&gt; 返回 -<span class="number">2.</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>本题难点： 将 min() 函数复杂度降为 O(1)O(1) ，可通过建立辅助栈实现；<br>数据栈 A ： 栈 A用于存储所有元素，保证入栈 push() 函数、出栈 pop() 函数、获取栈顶 top() 函数的正常逻辑。<br>辅助栈 B ： 栈 B中存储栈 A 中所有 非严格降序 的元素，则栈 A 中的最小元素始终对应栈 B 的栈顶元素，即 min() 函数只需返回栈 B 的栈顶元素即可。<br>因此，只需设法维护好栈B的元素，使其保持非严格降序，即可实现 min()函数的O(1)复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack1;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack2;    </span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">       <span class="keyword">this</span>.stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack1.push(x);</span><br><span class="line">        <span class="keyword">if</span>(stack2.empty() || stack2.peek() &gt;= x)</span><br><span class="line">            stack2.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(stack1.pop().equals(stack2.peek()))</span><br><span class="line">            stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> stack1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> stack2.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiate and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.min();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的-min-函数在该栈中，调用-min、push-及-pop-的时间复杂度都是-O-1-。&quot;&gt;&lt;a href=&quot;#定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的-min-函数在该栈中，调用-min、push-及-pop-的时间复杂度都是-O-1-。&quot; class=&quot;headerlink&quot; title=&quot;定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。&quot;&gt;&lt;/a&gt;定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MinStack minStack1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MinStack();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack1.push(-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack1.push(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack1.push(-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack1.min();   --&amp;gt; 返回 -&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack1.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack1.top();      --&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minStack1.min();   --&amp;gt; 返回 -&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="http://sysszcl.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://sysszcl.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>浏览器和Session之间关联的技术内幕</title>
    <link href="http://sysszcl.github.io/article/9a8d88a0.html"/>
    <id>http://sysszcl.github.io/article/9a8d88a0.html</id>
    <published>2022-01-23T14:07:00.000Z</published>
    <updated>2025-06-20T14:42:26.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Session技术，底层其实是基于Cookie技术来实现的"><a href="#Session技术，底层其实是基于Cookie技术来实现的" class="headerlink" title="Session技术，底层其实是基于Cookie技术来实现的"></a>Session技术，底层其实是基于Cookie技术来实现的</h3><p>1.浏览器没有任何的cookie信息，浏览器向服务器发起请求。<br>2.服务器第一次使用request.getSession();(第一次使用本方法作用：创建会话对象)，服务器每次创建一个Cookie对象。这个Cookie对象的key永远是：JSESSIONID值是新创建出来的Session的id值。<br>3.通过响应把新创建出来的Session的id值返回给客户端Set-cookie: JSESSIONID=23423234211XAS223XASH233HSDF23;<br>4.浏览器解析到数据，就马上创建出一个Cookie对象。<br>5.浏览器端有了JSESSIONID之后的每次请求，都会把SESSION的id以Cookie的形式发送给服务器。<br>6.浏览器收到请求后再次使用request.getSession();(第二次使用本方法作用：通过Cookie中的id找到服务器之前创建好的Session对象，并返回)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Session技术，底层其实是基于Cookie技术来实现的&quot;&gt;&lt;a href=&quot;#Session技术，底层其实是基于Cookie技术来实现的&quot; class=&quot;headerlink&quot; title=&quot;Session技术，底层其实是基于Cookie技术来实现的&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Web" scheme="http://sysszcl.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="http://sysszcl.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
